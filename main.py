# main.py
import asyncio
import json
import logging
import random
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
)

# ---------------- CONFIG ----------------
BOT_TOKEN = "7909644376:AAHD8zFEV-hjsVSfZ4AdtceBi5u9-ywRHOQ"  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ALLOWED_GROUP_ID = -1001941069892  # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
ADMIN_IDS = {6878462090}  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤ (—Ç–≤–æ–π id)

DATA_FILE = Path("data.json")
SAVE_INTERVAL = 10  # —Å–µ–∫ (—Ñ–æ–Ω–æ–≤–∞—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ; —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)

DEGRADE_COOLDOWN_SEC = 3600  # 1 —á–∞—Å
DISEASE_CHANCE_DEFAULT = 20  # %

EMOJIS = ["üéâ", "üëΩ", "ü§¢", "üòµ", "üíÄ", "ü§°", "üß†", "üî•", "‚ùå", "‚ö°Ô∏è"]

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# -------------- STATE & LOCK --------------
lock = asyncio.Lock()


def utc_now():
    return datetime.utcnow()


def dt_to_iso(dt: datetime) -> str:
    return dt.isoformat()


def iso_to_dt(s: str) -> datetime:
    return datetime.fromisoformat(s)


# -------------- DATA MODEL (in memory) --------------
# data schema stored in data.json
default_data = {
    "users": {},  # user_id -> {"iq": int, "ultra": int, "last_degrade": iso str or "", "diseases": [ {name, start_iso, duration_h, multiplier} ]}
    "degrade_actions": [],  # [ {"text": str, "iq_delta": int} ]
    "diseases": [],  # [ {"name": str, "multiplier": float, "min_hours": int, "max_hours": int} ]
    "user_commands": [],  # [ {"user_id": int, "text": str} ]
    "disease_chance": DISEASE_CHANCE_DEFAULT
}

DATA: Dict[str, Any] = {}
_save_task = None
_app = None  # Application instance (set later)


# -------------- PERSISTENCE --------------
def load_data():
    global DATA
    if DATA_FILE.exists():
        try:
            with DATA_FILE.open("r", encoding="utf-8") as f:
                DATA = json.load(f)
            # Backwards compatibility: ensure keys exist
            for k in default_data:
                if k not in DATA:
                    DATA[k] = default_data[k]
        except Exception as e:
            log.exception("Failed to load data.json, starting with default. Error: %s", e)
            DATA = default_data.copy()
    else:
        DATA = default_data.copy()
    # ensure types
    if "disease_chance" not in DATA:
        DATA["disease_chance"] = DISEASE_CHANCE_DEFAULT


def save_data():
    try:
        with DATA_FILE.open("w", encoding="utf-8") as f:
            json.dump(DATA, f, ensure_ascii=False, indent=2)
        log.info("Data saved.")
    except Exception:
        log.exception("Failed to save data.")


async def autosave_loop():
    while True:
        await asyncio.sleep(SAVE_INTERVAL)
        async with lock:
            save_data()


# -------------- HELPERS --------------
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


def ensure_user(user_id: int):
    users = DATA.setdefault("users", {})
    s = users.get(str(user_id))
    if not s:
        users[str(user_id)] = {
            "iq": 100,
            "ultra": 0,
            "last_degrade": "",  # ISO string
            "diseases": []  # each: {name, start_iso, duration_h, multiplier}
        }
    return users[str(user_id)]


def get_last_degrade(user_rec: dict) -> datetime:
    s = user_rec.get("last_degrade", "")
    if s:
        try:
            return iso_to_dt(s)
        except Exception:
            return datetime.fromtimestamp(0)
    return datetime.fromtimestamp(0)


def set_last_degrade(user_rec: dict, dt: datetime):
    user_rec["last_degrade"] = dt_to_iso(dt)


def active_diseases(user_rec: dict) -> List[dict]:
    now = utc_now()
    out = []
    newlist = []
    for d in user_rec.get("diseases", []):
        try:
            start = iso_to_dt(d["start_iso"])
            duration_h = int(d["duration_h"])
            end = start + timedelta(hours=duration_h)
            if end > now:
                out.append(d)
                newlist.append(d)
        except Exception:
            continue
    # replace with only active
    user_rec["diseases"] = newlist
    return out


def diseases_multiplier(user_rec: dict) -> float:
    # returns additional multiplier factor sum (e.g. 0.3 means +30%)
    total = 0.0
    for d in active_diseases(user_rec):
        total += float(d.get("multiplier", 0))
    return total


def format_remaining(start_iso: str, duration_h: int) -> str:
    try:
        start = iso_to_dt(start_iso)
    except Exception:
        return "unknown"
    end = start + timedelta(hours=duration_h)
    now = utc_now()
    if end <= now:
        return f"–∏—Å—Ç–µ–∫–ª–∞ {end.strftime('%d.%m %H:%M')} (UTC)"
    rem = end - now
    h = rem.seconds // 3600 + rem.days * 24
    m = (rem.seconds % 3600) // 60
    return f"–æ—Å—Ç–∞–ª–æ—Å—å {h}—á {m}–º (–¥–æ {end.strftime('%d.%m %H:%M')} UTC)"


def random_emoji() -> str:
    return random.choice(EMOJIS)


# -------------- ADMIN MENU STATES --------------
# Conversation states
(
    S_MENU,
    S_ADD_ACTION_TEXT,
    S_ADD_ACTION_IQ,
    S_DEL_ACTION,
    S_ADD_DISEASE_NAME,
    S_ADD_DISEASE_MIN,
    S_ADD_DISEASE_MAX,
    S_ADD_DISEASE_MULT,
    S_DEL_DISEASE,
    S_SET_IQ,
    S_SET_ULTRA,
    S_SET_POINTS,
    S_RESET_TIMERS_CONFIRM,
    S_SET_DISEASE_CHANCE,
) = range(14)


# -------------- ADMIN INLINE MENU & HANDLERS --------------
def admin_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data="menu_add_action")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data="menu_del_action")],
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π", callback_data="menu_list_actions")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–∑–Ω—å", callback_data="menu_add_disease")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –±–æ–ª–µ–∑–Ω—å", callback_data="menu_del_disease")],
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –±–æ–ª–µ–∑–Ω–µ–π", callback_data="menu_list_diseases")],
        [InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="menu_list_usercmds")],
        [InlineKeyboardButton("–í—ã–¥–∞—Ç—å ultra / points / IQ", callback_data="menu_manage_users")],
        [InlineKeyboardButton("–°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–æ–≤ –≤—Å–µ–º", callback_data="menu_reset_timers")],
        [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–Ω—Å –±–æ–ª–µ–∑–Ω–∏", callback_data="menu_set_chance")],
        [InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data="menu_exit")],
    ]
    return InlineKeyboardMarkup(keyboard)


async def cmd_eair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start admin menu (Conversation entry)."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return ConversationHandler.END

    text = (
        "üõ†Ô∏è *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∏ –±–æ–ª–µ–∑–Ω–∏, –≤—ã–¥–∞—Ç—å ultra/iq/–æ—á–∫–∏, "
        "—Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã –∏ —Ç.–¥.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è."
    )
    await update.message.reply_text(text, reply_markup=admin_main_keyboard(), parse_mode="Markdown")
    return S_MENU


async def admin_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle inline menu callbacks."""
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.message.edit_text("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return ConversationHandler.END

    # ROUTING
    if data == "menu_add_action":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è (–ø—Ä–∏–º–µ—Ä: '–ö—É–ø–∏–ª –∞–π—Ñ–æ–Ω –≤ –∫—Ä–µ–¥–∏—Ç'):")
        return S_ADD_ACTION_TEXT

    if data == "menu_add_disease":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):")
        return S_ADD_DISEASE_NAME

    if data == "menu_del_action":
        # show list
        items = DATA.get("degrade_actions", [])
        if not items:
            await query.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return S_MENU
        text = "–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):\n"
        for i, a in enumerate(items, 1):
            text += f"{i}. {a['text']} ({a['iq_delta']} IQ)\n"
        await query.message.reply_text(text)
        return S_DEL_ACTION

    if data == "menu_list_actions":
        items = DATA.get("degrade_actions", [])
        text = "–î–µ–π—Å—Ç–≤–∏—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n" if items else "–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π.\n"
        for i, a in enumerate(items, 1):
            text += f"{i}. {a['text']} ({a['iq_delta']} IQ)\n"
        await query.message.reply_text(text)
        return S_MENU

    if data == "menu_del_disease":
        items = DATA.get("diseases", [])
        if not items:
            await query.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.")
            return S_MENU
        text = "–°–ø–∏—Å–æ–∫ –±–æ–ª–µ–∑–Ω–µ–π (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):\n"
        for i, d in enumerate(items, 1):
            text += f"{i}. {d['name']} (x{d['multiplier']}, {d['min_hours']}-{d['max_hours']}—á)\n"
        await query.message.reply_text(text)
        return S_DEL_DISEASE

    if data == "menu_list_diseases":
        items = DATA.get("diseases", [])
        if not items:
            await query.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.")
            return S_MENU
        text = "–ë–æ–ª–µ–∑–Ω–∏:\n"
        for i, d in enumerate(items, 1):
            text += f"{i}. {d['name']} ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å: {d['multiplier']}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {d['min_hours']}-{d['max_hours']} —á\n"
        await query.message.reply_text(text)
        return S_MENU

    if data == "menu_list_usercmds":
        items = DATA.get("user_commands", [])
        if not items:
            await query.message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.")
            return S_MENU
        text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        for i, c in enumerate(items, 1):
            text += f"{i}. ({c['user_id']}) {c['text']}\n"
        await query.message.reply_text(text)
        return S_MENU

    if data == "menu_manage_users":
        # present sub buttons
        kb = [
            [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å IQ", callback_data="menu_set_iq")],
            [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ultra", callback_data="menu_set_ultra")],
            [InlineKeyboardButton("–í—ã–¥–∞—Ç—å –æ—á–∫–∏ (points)", callback_data="menu_set_points")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu_back")],
        ]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=InlineKeyboardMarkup(kb))
        return S_MENU

    if data == "menu_set_iq":
        await query.message.reply_text("–í–≤–µ–¥–∏: <user_id> <iq>")
        return S_SET_IQ

    if data == "menu_set_ultra":
        await query.message.reply_text("–í–≤–µ–¥–∏: <user_id> <ultra>")
        return S_SET_ULTRA

    if data == "menu_set_points":
        await query.message.reply_text("–í–≤–µ–¥–∏: <user_id> <points>")
        return S_SET_POINTS

    if data == "menu_reset_timers":
        # confirm
        kb = [
            [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–æ–≤", callback_data="confirm_reset_timers")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="menu_exit")],
        ]
        await query.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –°–±—Ä–æ—Å–∏—Ç —Ç–∞–π–º–µ—Ä—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=InlineKeyboardMarkup(kb))
        return S_RESET_TIMERS_CONFIRM

    if data == "confirm_reset_timers":
        # reset last_degrade for all users
        async with lock:
            for uid, rec in DATA.get("users", {}).items():
                rec["last_degrade"] = ""
            save_data()
        await query.message.edit_text("‚úÖ –¢–∞–π–º–µ—Ä—ã –≤—Å–µ–º —Å–±—Ä–æ—à–µ–Ω—ã.")
        return ConversationHandler.END

    if data == "menu_set_chance":
        await query.message.reply_text(f"–¢–µ–∫—É—â–∏–π —à–∞–Ω—Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {DATA.get('disease_chance', DISEASE_CHANCE_DEFAULT)}%.\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ 0-100 –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
        return S_SET_DISEASE_CHANCE

    if data == "menu_exit" or data == "menu_back":
        await query.message.edit_text("–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏.")
        return ConversationHandler.END

    # Fallback
    await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è.")
    return S_MENU


# -------------- ADMIN: Conversation text handlers --------------
async def receive_add_action_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return S_ADD_ACTION_TEXT
    context.user_data["new_action_text"] = text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ IQ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä -3):")
    return S_ADD_ACTION_IQ


async def receive_add_action_iq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = update.message.text.strip()
    try:
        iq = int(s)
    except ValueError:
        await update.message.reply_text("IQ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return S_ADD_ACTION_IQ
    text = context.user_data.pop("new_action_text", None)
    if not text:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    async with lock:
        DATA.setdefault("degrade_actions", []).append({"text": text, "iq_delta": iq})
        save_data()
    await update.message.reply_text(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {text} ({iq} IQ)")
    return ConversationHandler.END


async def receive_del_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = update.message.text.strip()
    try:
        idx = int(s) - 1
    except ValueError:
        await update.message.reply_text("–ù—É–∂–µ–Ω –Ω–æ–º–µ—Ä (—á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return S_DEL_ACTION
    async with lock:
        actions = DATA.get("degrade_actions", [])
        if not (0 <= idx < len(actions)):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return ConversationHandler.END
        removed = actions.pop(idx)
        save_data()
    await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {removed['text']}")
    return ConversationHandler.END


async def receive_add_disease_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return S_ADD_DISEASE_NAME
    context.user_data["disease_name"] = name
    await update.message.reply_text("–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö (—Ü–µ–ª–æ–µ):")
    return S_ADD_DISEASE_MIN


async def receive_add_disease_min(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = update.message.text.strip()
    try:
        hmin = int(s)
        if hmin <= 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("–ù—É–∂–µ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ–ª—ã–π —á–∞—Å. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–æ–≤–∞:")
        return S_ADD_DISEASE_MIN
    context.user_data["disease_min"] = hmin
    await update.message.reply_text("–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö (—Ü–µ–ª–æ–µ, >= –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ):")
    return S_ADD_DISEASE_MAX


async def receive_add_disease_max(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = update.message.text.strip()
    try:
        hmax = int(s)
        if hmax <= 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("–ù—É–∂–µ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ–ª—ã–π —á–∞—Å. –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–æ–≤–∞:")
        return S_ADD_DISEASE_MAX
    if hmax < context.user_data.get("disease_min", 0):
        await update.message.reply_text("–ú–∞–∫—Å–∏–º—É–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return S_ADD_DISEASE_MAX
    context.user_data["disease_max"] = hmax
    await update.message.reply_text("–í–≤–µ–¥–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å (float), –Ω–∞–ø—Ä–∏–º–µ—Ä 1.3 (–≥–¥–µ 1.0 ‚Äî –±–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞, 1.3 ‚Äî +30%):")
    return S_ADD_DISEASE_MULT


async def receive_add_disease_mult(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = update.message.text.strip().replace(",", ".")
    try:
        mult = float(s)
        if mult < 1.0:
            await update.message.reply_text("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1.0. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return S_ADD_DISEASE_MULT
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: 1.3")
        return S_ADD_DISEASE_MULT
    name = context.user_data.pop("disease_name", None)
    hmin = context.user_data.pop("disease_min", None)
    hmax = context.user_data.pop("disease_max", None)
    if not (name and hmin and hmax):
        await update.message.reply_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    async with lock:
        DATA.setdefault("diseases", []).append({
            "name": name,
            "multiplier": mult,
            "min_hours": int(hmin),
            "max_hours": int(hmax)
        })
        save_data()
    await update.message.reply_text(f"‚úÖ –ë–æ–ª–µ–∑–Ω—å '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞: {hmin}-{hmax} —á, x{mult}")
    return ConversationHandler.END


async def receive_del_disease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = update.message.text.strip()
    try:
        idx = int(s) - 1
    except ValueError:
        await update.message.reply_text("–ù—É–∂–µ–Ω –Ω–æ–º–µ—Ä (—á–∏—Å–ª–æ). –û—Ç–º–µ–Ω–∞.")
        return ConversationHandler.END
    async with lock:
        arr = DATA.get("diseases", [])
        if not (0 <= idx < len(arr)):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
            return ConversationHandler.END
        removed = arr.pop(idx)
        save_data()
    await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å: {removed['name']}")
    return ConversationHandler.END


async def receive_set_iq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = update.message.text.strip().split()
    if len(s) != 2:
        await update.message.reply_text("–ù—É–∂–Ω–æ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞: <user_id> <iq>")
        return S_SET_IQ
    try:
        uid = int(s[0])
        iq = int(s[1])
    except ValueError:
        await update.message.reply_text("ID –∏ IQ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return S_SET_IQ
    async with lock:
        rec = ensure_user(uid)
        rec["iq"] = iq
        save_data()
    await update.message.reply_text(f"‚úÖ IQ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {iq}")
    return ConversationHandler.END


async def receive_set_ultra(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = update.message.text.strip().split()
    if len(s) != 2:
        await update.message.reply_text("–ù—É–∂–Ω–æ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞: <user_id> <ultra>")
        return S_SET_ULTRA
    try:
        uid = int(s[0])
        ultra = int(s[1])
    except ValueError:
        await update.message.reply_text("ID –∏ ultra –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return S_SET_ULTRA
    async with lock:
        rec = ensure_user(uid)
        rec["ultra"] = ultra
        save_data()
    await update.message.reply_text(f"‚úÖ Ultra –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ultra}")
    return ConversationHandler.END


async def receive_set_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = update.message.text.strip().split()
    if len(s) != 2:
        await update.message.reply_text("–ù—É–∂–Ω–æ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞: <user_id> <points>")
        return S_SET_POINTS
    try:
        uid = int(s[0])
        pts = int(s[1])
    except ValueError:
        await update.message.reply_text("ID –∏ points –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return S_SET_POINTS
    async with lock:
        rec = ensure_user(uid)
        # for backward compatibility we store points as 'points' in user record
        rec["points"] = rec.get("points", 0) + pts
        save_data()
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –≤—ã–¥–∞–Ω–æ {pts} points (—Ç–µ–ø–µ—Ä—å {rec.get('points')}).")
    return ConversationHandler.END


async def receive_set_disease_chance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = update.message.text.strip()
    try:
        val = int(s)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 0-100.")
        return S_SET_DISEASE_CHANCE
    if not (0 <= val <= 100):
        await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100.")
        return S_SET_DISEASE_CHANCE
    async with lock:
        DATA["disease_chance"] = val
        save_data()
    await update.message.reply_text(f"‚úÖ –®–∞–Ω—Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val}%")
    return ConversationHandler.END


# -------------- USER COMMANDS --------------
async def cmd_degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_GROUP_ID:
        return
    uid = update.effective_user.id
    async with lock:
        rec = ensure_user(uid)
        last = get_last_degrade(rec)
        now = utc_now()
        elapsed = (now - last).total_seconds()
        if elapsed < DEGRADE_COOLDOWN_SEC:
            remain = int(DEGRADE_COOLDOWN_SEC - elapsed)
            mm = remain // 60
            ss = remain % 60
            await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {mm} –º–∏–Ω {ss} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏.")
            return
        # build combined actions list
        actions = list(DATA.get("degrade_actions", []))
        # include user-defined commands (user_commands)
        for uc in DATA.get("user_commands", []):
            actions.append({"text": uc["text"], "iq_delta": -1})
        if not actions:
            await update.message.reply_text("‚ö†Ô∏è –ê–¥–º–∏–Ω –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏.")
            return
        action = random.choice(actions)
        base = abs(int(action.get("iq_delta", -1)))
        # calc multiplier from diseases
        mult = diseases_multiplier(rec)
        iq_loss = int(base * (1 + mult))
        rec["iq"] = rec.get("iq", 100) - iq_loss
        set_last_degrade(rec, now)
        # chance to catch disease
        chance = DATA.get("disease_chance", DISEASE_CHANCE_DEFAULT)
        disease_msg = ""
        if DATA.get("diseases") and random.randint(1, 100) <= chance:
            dis = random.choice(DATA["diseases"])
            dur = random.randint(int(dis["min_hours"]), int(dis["max_hours"]))
            rec.setdefault("diseases", []).append({
                "name": dis["name"],
                "start_iso": dt_to_iso(now),
                "duration_h": dur,
                "multiplier": dis["multiplier"]
            })
            disease_msg = f"\n{random_emoji()} –ü–æ–¥—Ö–≤–∞—Ç–∏–ª –±–æ–ª–µ–∑–Ω—å: {dis['name']} (–¥–ª. {dur} —á, +{int(dis['multiplier']*100)}%)."
        save_data()
    await update.message.reply_text(f"{action['text']}\n–¢–≤–æ–π IQ —É–ø–∞–ª –Ω–∞ {iq_loss} {random_emoji()}\n–°–µ–π—á–∞—Å IQ: {rec['iq']}{disease_msg}")


async def cmd_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_GROUP_ID:
        return
    async with lock:
        users_map = DATA.get("users", {})
        if not users_map:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        arr = []
        for k, v in users_map.items():
            try:
                uid = int(k)
            except:
                continue
            arr.append((uid, v.get("iq", 100)))
        arr.sort(key=lambda x: x[1], reverse=True)
    text = "üèÜ –¢–æ–ø –ø–æ IQ:\n"
    for i, (uid, iq) in enumerate(arr[:10], 1):
        try:
            chat = await context.bot.get_chat(uid)
            name = chat.username or chat.first_name or str(uid)
        except Exception:
            name = str(uid)
        text += f"{i}. {name} ‚Äî {iq} {random_emoji()}\n"
    await update.message.reply_text(text)


async def cmd_my(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    async with lock:
        rec = ensure_user(uid)
        active = active_diseases(rec)  # also cleans expired
        iq = rec.get("iq", 100)
        ultra = rec.get("ultra", 0)
        last = get_last_degrade(rec)
        now = utc_now()
        cd = max(0, DEGRADE_COOLDOWN_SEC - (now - last).total_seconds())
        mm = int(cd // 60)
        ss = int(cd % 60)
    text = f"–¢–≤–æ–π IQ: {iq}\nUltra: {ultra}\n–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑: {mm} –º–∏–Ω {ss} —Å–µ–∫\n\n–ë–æ–ª–µ–∑–Ω–∏:\n"
    if not active:
        text += "‚Äî –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–∑–Ω–µ–π\n"
    else:
        for d in active:
            text += f"{d['name']} ‚Äî {format_remaining(d['start_iso'], int(d['duration_h']))}\n"
    await update.message.reply_text(text)


async def cmd_d_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # /d <text> ‚Äî add user command; cost 1 ultra
    uid = update.effective_user.id
    text = " ".join(context.args).strip()
    if not text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /d <—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã>")
        return
    async with lock:
        rec = ensure_user(uid)
        if rec.get("ultra", 0) < 1:
            await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ultra –æ—á–∫–æ–≤ (–Ω—É–∂–Ω–æ 1).")
            return
        rec["ultra"] -= 1
        DATA.setdefault("user_commands", []).append({"user_id": uid, "text": text})
        save_data()
    await update.message.reply_text(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å ultra: {rec['ultra']}")


# -------------- Admin commands not via conversation --------------
async def cmd_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # simple list for group or admin
    async with lock:
        acts = DATA.get("degrade_actions", [])
    if not acts:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π.")
        return
    txt = "–î–µ–π—Å—Ç–≤–∏—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
    for i, a in enumerate(acts, 1):
        txt += f"{i}. {a['text']} ({a['iq_delta']} IQ)\n"
    await update.message.reply_text(txt)


# -------------- Conversation fallbacks --------------
async def admin_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–∞.")
    return ConversationHandler.END


# -------------- Startup and registration --------------
def build_application():
    global _app
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    _app = app

    # Conversation handler for admin menu
    conv = ConversationHandler(
        entry_points=[CommandHandler("eair", cmd_eair)],
        states={
            S_MENU: [CallbackQueryHandler(admin_menu_callback)],
            S_ADD_ACTION_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_add_action_text)],
            S_ADD_ACTION_IQ: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_add_action_iq)],
            S_DEL_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_del_action)],
            S_ADD_DISEASE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_add_disease_name)],
            S_ADD_DISEASE_MIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_add_disease_min)],
            S_ADD_DISEASE_MAX: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_add_disease_max)],
            S_ADD_DISEASE_MULT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_add_disease_mult)],
            S_DEL_DISEASE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_del_disease)],
            S_SET_IQ: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_set_iq)],
            S_SET_ULTRA: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_set_ultra)],
            S_SET_POINTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_set_points)],
            S_RESET_TIMERS_CONFIRM: [CallbackQueryHandler(admin_menu_callback)],
            S_SET_DISEASE_CHANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_set_disease_chance)],
        },
        fallbacks=[CommandHandler("cancel", admin_cancel)],
        allow_reentry=True,
    )

    # User commands
    app.add_handler(conv)

    app.add_handler(CommandHandler("start", lambda u, c: u.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /degrade –≤ –≥—Ä—É–ø–ø–µ.")))
    app.add_handler(CommandHandler("degrade", cmd_degrade))
    app.add_handler(CommandHandler("top", cmd_top))
    app.add_handler(CommandHandler("my", cmd_my))
    app.add_handler(CommandHandler("d", cmd_d_add))
    app.add_handler(CommandHandler("list", cmd_list))

    return app


# -------------- Main --------------
def main():
    load_data()
    app = build_application()

    # run autosave background task
    loop = asyncio.get_event_loop()
    loop.create_task(autosave_loop())

    log.info("Starting bot...")
    app.run_polling()


if __name__ == "__main__":
    main()
