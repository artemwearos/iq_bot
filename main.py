import logging
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, Chat, ChatMember
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7909644376:AAHD8zFEV-hjsVSfZ4AdtceBi5u9-ywRHOQ"
ALLOWED_GROUP_ID = -1001941069892  # —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞
ADMIN_ID = 6878462090

# –õ–æ–≥–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ (–ø–∞–º—è—Ç—å)
users_iq = {}  # user_id: iq (int)
users_last_degrade = {}  # user_id: datetime
users_diseases = {}  # user_id: list of dicts {name, start, duration_hrs, effect_percent}
degrade_actions = []  # list of dicts {text:str, iq_delta:int}
degrade_custom_cmds = []  # list of dicts {user_id:int, text:str}
disease_list = []  # list of dicts {name:str, effect_percent:int, min_dur:int, max_dur:int}

users_points = {}  # user_id: int (–æ—á–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥)

# –°–º–∞–π–ª—ã –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞
EMOJIS = ['üéâ', 'üëΩ', 'ü§¢', 'üòµ', 'üíÄ', 'ü§°', 'üßü', 'ü§ñ', 'üî•', 'üß†', 'üëª', 'üòà']

def get_random_emoji():
    return random.choice(EMOJIS)

def current_time():
    return datetime.utcnow()

def format_time_diff(dt: datetime):
    now = current_time()
    diff = dt - now
    if diff.total_seconds() <= 0:
        return "0 —Å–µ–∫—É–Ω–¥"
    hours, remainder = divmod(int(diff.total_seconds()), 3600)
    minutes, seconds = divmod(remainder, 60)
    parts = []
    if hours > 0:
        parts.append(f"{hours} —á")
    if minutes > 0:
        parts.append(f"{minutes} –º–∏–Ω")
    if seconds > 0:
        parts.append(f"{seconds} —Å")
    return " ".join(parts)

def get_user_nick(update: Update, user_id: int):
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞, –µ—Å–ª–∏ –Ω–µ—Ç - id
    chat = update.effective_chat
    try:
        member = chat.get_member(user_id)
        if member.user.username:
            return f"@{member.user.username}"
        else:
            name = member.user.first_name or "User"
            return f"{name}"
    except Exception:
        return str(user_id)

def calc_disease_effect(user_id):
    # –°—É–º–º–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–∑–Ω–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in users_diseases:
        return 0
    now = current_time()
    total_percent = 0
    for d in users_diseases[user_id]:
        end_time = d['start'] + timedelta(hours=d['duration_hrs'])
        if end_time > now:
            total_percent += d['effect_percent']
    return total_percent

def clean_expired_diseases():
    now = current_time()
    for uid in list(users_diseases.keys()):
        new_list = []
        for d in users_diseases[uid]:
            end_time = d['start'] + timedelta(hours=d['duration_hrs'])
            if end_time > now:
                new_list.append(d)
        users_diseases[uid] = new_list
        if not users_diseases[uid]:
            del users_diseases[uid]

async def ensure_user_initialized(user_id):
    if user_id not in users_iq:
        users_iq[user_id] = 100
    if user_id not in users_last_degrade:
        users_last_degrade[user_id] = datetime.fromtimestamp(0)
    if user_id not in users_points:
        users_points[user_id] = 0

def check_group(update: Update):
    return update.effective_chat and update.effective_chat.id == ALLOWED_GROUP_ID

# ========== –ö–æ–º–∞–Ω–¥—ã ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("–ü–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ IQ. –í –≥—Ä—É–ø–ø–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /degrade.")

async def degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_group(update):
        return
    user_id = update.effective_user.id
    await ensure_user_initialized(user_id)

    now = current_time()
    last = users_last_degrade[user_id]
    diff = (now - last).total_seconds()
    if diff < 3600:
        remain = format_time_diff(last + timedelta(hours=1))
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {remain} –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏.")
        return

    if not degrade_actions:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–∞–≤–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    action = random.choice(degrade_actions)
    base_iq_delta = action['iq_delta']

    # –°—á–∏—Ç–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –±–æ–ª–µ–∑–Ω–µ–π
    effect_percent = calc_disease_effect(user_id)
    total_iq_delta = int(base_iq_delta * (1 + effect_percent / 100))

    users_iq[user_id] += total_iq_delta
    users_last_degrade[user_id] = now

    emoji = get_random_emoji()
    msg = (f"{action['text']}, —Ç–≤–æ–π IQ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {total_iq_delta} {emoji}\n"
           f"–°–µ–π—á–∞—Å —Ç–≤–æ–π IQ: {users_iq[user_id]}")

    # –†–∞–Ω–¥–æ–º–Ω–æ —à–∞–Ω—Å –∑–∞–±–æ–ª–µ—Ç—å
    if disease_list:
        chance = random.randint(1, 100)
        if chance <= 10:  # 10% —à–∞–Ω—Å –∑–∞–±–æ–ª–µ—Ç—å
            disease = random.choice(disease_list)
            duration = random.randint(disease['min_dur'], disease['max_dur'])
            new_disease = {
                "name": disease['name'],
                "start": now,
                "duration_hrs": duration,
                "effect_percent": disease['effect_percent']
            }
            users_diseases.setdefault(user_id, []).append(new_disease)
            msg += f"\n{get_random_emoji()} –í—ã –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏ –±–æ–ª–µ–∑–Ω—å: {disease['name']}. " \
                   f"–¢–µ–ø–µ—Ä—å IQ –ø–∞–¥–∞–µ—Ç –Ω–∞ {disease['effect_percent']}% –±–æ–ª—å—à–µ {get_random_emoji()}"
    await update.message.reply_text(msg)

async def my_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_diseases or not users_diseases[user_id]:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.")
        return
    now = current_time()
    msgs = []
    for d in users_diseases[user_id]:
        end_time = d['start'] + timedelta(hours=d['duration_hrs'])
        if end_time > now:
            remain = format_time_diff(end_time)
            msgs.append(f"{d['name']} - –æ—Å—Ç–∞–ª–æ—Å—å: {remain}")
        else:
            msgs.append(f"{d['name']} - –∏—Å—Ç–µ–∫–ª–∞ {end_time.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)")
    await update.message.reply_text("\n".join(msgs))

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_group(update):
        return
    if not users_iq:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ IQ.")
        return
    sorted_users = sorted(users_iq.items(), key=lambda x: x[1])
    msg = "–¢–æ–ø IQ (–æ—Ç —Å–∞–º–æ–≥–æ –Ω–∏–∑–∫–æ–≥–æ):\n"
    for i, (uid, iq) in enumerate(sorted_users[:10], 1):
        nick = get_user_nick(update, uid)
        emoji = get_random_emoji()
        msg += f"{i}. {nick} ‚Äî {iq} {emoji}\n"
    await update.message.reply_text(msg)

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---

def is_admin(user_id):
    return user_id == ADMIN_ID

async def eair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return

    msg = "=== –ê–¥–º–∏–Ω–∫–∞ ===\n\n"

    msg += "–î–µ–π—Å—Ç–≤–∏—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
    if degrade_actions:
        for i, act in enumerate(degrade_actions, 1):
            msg += f"{i}. {act['text']} (IQ {act['iq_delta']})\n"
    else:
        msg += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π.\n"

    msg += "\n–ë–æ–ª–µ–∑–Ω–∏:\n"
    if disease_list:
        for i, d in enumerate(disease_list, 1):
            msg += (f"{i}. {d['name']} ‚Äî —ç—Ñ—Ñ–µ–∫—Ç {d['effect_percent']}%, "
                    f"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {d['min_dur']}‚Äì{d['max_dur']} —á\n")
    else:
        msg += "–ü–æ–∫–∞ –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.\n"

    msg += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
    if degrade_custom_cmds:
        for i, cmd in enumerate(degrade_custom_cmds, 1):
            msg += f"{i}. ({cmd['user_id']}) {cmd['text']}\n"
    else:
        msg += "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.\n"

    msg += "\n–¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ IQ:\n"
    if users_iq:
        for uid, iq in users_iq.items():
            msg += f"{uid}: {iq}\n"
    else:
        msg += "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"

    msg += "\n–û—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    if users_points:
        for uid, pts in users_points.items():
            msg += f"{uid}: {pts}\n"
    else:
        msg += "–ù–µ—Ç –æ—á–∫–æ–≤.\n"

    await update.message.reply_text(msg)

async def add_degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /add <—Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è> <—á–∏—Å–ª–æ IQ>")
        return
    try:
        iq_delta = int(args[-1])
        text = " ".join(args[:-1])
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ IQ. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
        return
    degrade_actions.append({"text": text, "iq_delta": iq_delta})
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {text} (IQ {iq_delta})")

async def del_degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    args = context.args
    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /del <–Ω–æ–º–µ—Ä>")
        return
    try:
        idx = int(args[0]) - 1
        if idx < 0 or idx >= len(degrade_actions):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
            return
        deleted = degrade_actions.pop(idx)
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {deleted['text']}")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –Ω–æ–º–µ—Ä–µ.")

async def add_disease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    args = context.args
    if len(args) < 4:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /adddisease <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—ç—Ñ—Ñ–µ–∫—Ç%> <–º–∏–Ω —á–∞—Å—ã> <–º–∞–∫—Å —á–∞—Å—ã>")
        return
    try:
        name = args[0]
        effect = int(args[1])
        minh = int(args[2])
        maxh = int(args[3])
        if minh > maxh:
            await update.message.reply_text("–ú–∏–Ω. —á–∞—Å—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å. —á–∞—Å–æ–≤.")
            return
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.")
        return
    disease_list.append({
        "name": name,
        "effect_percent": effect,
        "min_dur": minh,
        "max_dur": maxh
    })
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å {name} —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º {effect}%, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {minh}-{maxh} —á")

async def del_disease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    args = context.args
    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /deldisease <–Ω–æ–º–µ—Ä>")
        return
    try:
        idx = int(args[0]) - 1
        if idx < 0 or idx >= len(disease_list):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
            return
        deleted = disease_list.pop(idx)
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å {deleted['name']}")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –Ω–æ–º–µ—Ä–µ.")

async def set_iq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /setiq <user_id> <iq>")
        return
    try:
        uid = int(args[0])
        iq = int(args[1])
        users_iq[uid] = iq
        await update.message.reply_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω IQ {iq} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.")

async def reset_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    users_iq.clear()
    users_last_degrade.clear()
    users_diseases.clear()
    degrade_actions.clear()
    degrade_custom_cmds.clear()
    disease_list.clear()
    users_points.clear()
    await update.message.reply_text("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!")

async def reset_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    users_diseases.clear()
    await update.message.reply_text("–í—Å–µ –±–æ–ª–µ–∑–Ω–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã!")

async def add_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if
    async def add_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /addpoints <user_id> <–æ—á–∫–∏>")
        return
    try:
        uid = int(args[0])
        pts = int(args[1])
        users_points[uid] = users_points.get(uid, 0) + pts
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {pts} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}. –¢–µ–∫—É—â–∏–µ –æ—á–∫–∏: {users_points[uid]}")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.")

async def user_add_degrade_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await ensure_user_initialized(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –æ—á–∫–æ–≤
    if users_points.get(user_id, 0) < 1:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ (–Ω—É–∂–Ω–æ 1 –æ—á–∫–æ).")
        return

    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /d <—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã>")
        return

    degrade_custom_cmds.append({
        "user_id": user_id,
        "text": text
    })

    # –°–Ω–∏–º–∞–µ–º 1 –æ—á–∫–æ
    users_points[user_id] -= 1
    await update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {users_points[user_id]} –æ—á–∫–æ–≤.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await context.bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n{text}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

async def list_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_group(update):
        return

    msg = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    msg += "/degrade ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é IQ (—Ä–∞–∑ –≤ —á–∞—Å)\n"
    msg += "/my ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –±–æ–ª–µ–∑–Ω–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å\n"
    msg += "/top ‚Äî —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ IQ\n"
    if update.effective_user.id == ADMIN_ID:
        msg += "\n–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:\n"
        msg += "/eair ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n"
        msg += "/add <—Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è> <IQ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏\n"
        msg += "/del <–Ω–æ–º–µ—Ä> ‚Äî —É–¥–∞–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏\n"
        msg += "/adddisease <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—ç—Ñ—Ñ–µ–∫—Ç%> <–º–∏–Ω —á–∞—Å—ã> <–º–∞–∫—Å —á–∞—Å—ã> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–∑–Ω—å\n"
        msg += "/deldisease <–Ω–æ–º–µ—Ä> ‚Äî —É–¥–∞–ª–∏—Ç—å –±–æ–ª–µ–∑–Ω—å\n"
        msg += "/setiq <user_id> <iq> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å IQ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        msg += "/addpoints <user_id> <–æ—á–∫–∏> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        msg += "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
        msg += "/resetdiseases ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –±–æ–ª–µ–∑–Ω–∏\n"
    msg += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
    if degrade_custom_cmds:
        for i, cmd in enumerate(degrade_custom_cmds, 1):
            msg += f"{i}. ({cmd['user_id']}) {cmd['text']}\n"
    else:
        msg += "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.\n"
    await update.message.reply_text(msg)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ (—Ä–∞–Ω–¥–æ–º–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ degrade)
def get_random_custom_degrade():
    if degrade_custom_cmds:
        return random.choice(degrade_custom_cmds)['text']
    return None

async def degrade_with_custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –î–ª—è –∑–∞–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã /degrade - –º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —Ç.–∫. –æ—Å–Ω–æ–≤–Ω–æ–π degrade —É–∂–µ –µ—Å—Ç—å.
    # –ù–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Å IQ —ç—Ñ—Ñ–µ–∫—Ç–æ–º 0 –∏–ª–∏ -1 –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞.
    pass

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("degrade", degrade))
    app.add_handler(CommandHandler("my", my_diseases))
    app.add_handler(CommandHandler("top", top))

    app.add_handler(CommandHandler("eair", eair))
    app.add_handler(CommandHandler("add", add_degrade))
    app.add_handler(CommandHandler("del", del_degrade))
    app.add_handler(CommandHandler("adddisease", add_disease))
    app.add_handler(CommandHandler("deldisease", del_disease))
    app.add_handler(CommandHandler("setiq", set_iq))
    app.add_handler(CommandHandler("reset", reset_all))
    app.add_handler(CommandHandler("resetdiseases", reset_diseases))
    app.add_handler(CommandHandler("addpoints", add_points))
    app.add_handler(CommandHandler("d", user_add_degrade_cmd))
    app.add_handler(CommandHandler("list", list_commands))

    print("Bot started...")
    app.run_polling()

if __name__ == "__main__":
    main()
