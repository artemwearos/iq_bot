import logging
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, User
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    filters,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "7909644376:AAHD8zFEV-hjsVSfZ4AdtceBi5u9-ywRHOQ"  # —Ç–≤–æ–π —Ç–æ–∫–µ–Ω
GROUP_ID = -1001941069892  # —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞
ADMIN_ID = 6878462090  # —Ç–≤–æ–π –∞–π–¥–∏

EMOJIS = ["üéâ", "üëΩ", "üòµ‚Äçüí´", "ü§¢", "ü§Ø", "üíÄ", "üëª", "üî•", "‚ùå", "üí©", "ü§°"]

lock = asyncio.Lock()

users = {}  # user_id: {"iq": int, "last_degrade": datetime, "diseases": list of dicts, "points": int, "username": str}
degrade_actions = []  # dicts {text:str, iq_change:int}
diseases_list = []  # dicts {name:str, multiplier:float, duration_min:int, duration_max:int}
user_custom_commands = []  # dicts {user_id:int, text:str}


def now():
    return datetime.utcnow()


async def ensure_user(user: User):
    async with lock:
        if user.id not in users:
            users[user.id] = {
                "iq": 100,
                "last_degrade": datetime.fromtimestamp(0),
                "diseases": [],
                "points": 0,
                "username": user.username or f"{user.first_name or 'User'}",
            }
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if users[user.id]["username"] != (user.username or user.first_name):
                users[user.id]["username"] = user.username or user.first_name


async def clean_expired_diseases(user_id):
    async with lock:
        if user_id not in users:
            return
        now_dt = now()
        before = len(users[user_id]["diseases"])
        users[user_id]["diseases"] = [
            d for d in users[user_id]["diseases"] if d["end_time"] > now_dt
        ]
        after = len(users[user_id]["diseases"])
        if before != after:
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –±–æ–ª–µ–∑–Ω–µ–π —É {user_id}: —É–¥–∞–ª–µ–Ω–æ {before - after}")


def calculate_iq_penalty(base_penalty, user_id):
    mult = 1.0
    for disease in users[user_id]["diseases"]:
        mult += disease["multiplier"]
    return int(base_penalty * mult)


def random_emoji():
    return random.choice(EMOJIS)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π /degrade –≤ –≥—Ä—É–ø–ø–µ.")


async def degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != GROUP_ID:
        return
    user = update.effective_user
    await ensure_user(user)
    await clean_expired_diseases(user.id)

    user_data = users[user.id]
    now_dt = now()
    if (now_dt - user_data["last_degrade"]).total_seconds() < 3600:
        left = 3600 - int((now_dt - user_data["last_degrade"]).total_seconds())
        await update.message.reply_text(f"–î–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —á–∞—Å. –û—Å—Ç–∞–ª–æ—Å—å: {left} —Å–µ–∫—É–Ω–¥.")
        return

    if not degrade_actions:
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    action = random.choice(degrade_actions)
    base_penalty = abs(action["iq_change"])
    penalty = calculate_iq_penalty(base_penalty, user.id)
    iq_change = penalty if action["iq_change"] > 0 else -penalty

    user_data["iq"] += iq_change
    user_data["last_degrade"] = now_dt

    text = (
        f"{action['text']}\n"
        f"–¢–≤–æ–π IQ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {iq_change} {random_emoji()}\n"
        f"–°–µ–π—á–∞—Å IQ: {user_data['iq']}"
    )

    chance = 20  # —à–∞–Ω—Å –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –±–æ–ª–µ–∑–Ω—å
    if diseases_list and random.randint(1, 100) <= chance:
        disease = random.choice(diseases_list)
        duration_hours = random.randint(disease["duration_min"], disease["duration_max"])
        end_time = now_dt + timedelta(hours=duration_hours)
        user_data["diseases"].append(
            {
                "name": disease["name"],
                "multiplier": disease["multiplier"],
                "end_time": end_time,
                "start_time": now_dt,
            }
        )
        text += (
            f"\n{random_emoji()} –í—ã –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏ –±–æ–ª–µ–∑–Ω—å: {disease['name']}! "
            f"IQ —Ç–µ–ø–µ—Ä—å –ø–∞–¥–∞–µ—Ç –Ω–∞ {int(disease['multiplier'] * 100)}% –±–æ–ª—å—à–µ. "
            f"–ë–æ–ª–µ–∑–Ω—å –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_time.strftime('%d.%m %H:%M')} (UTC)."
        )

    await update.message.reply_text(text)


async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != GROUP_ID:
        return
    async with lock:
        sorted_users = sorted(users.items(), key=lambda x: x[1]["iq"], reverse=True)[:10]
        if not sorted_users:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        msg = "üèÜ –¢–æ–ø IQ:\n"
        for i, (uid, data) in enumerate(sorted_users, 1):
            username = data.get("username", f"User{uid}")
            msg += f"{i}. {username} ‚Äî IQ {data['iq']} {random_emoji()}\n"
    await update.message.reply_text(msg)


async def my(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await ensure_user(user)
    await clean_expired_diseases(user.id)

    user_data = users[user.id]
    if not user_data["diseases"]:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.")
        return

    text = "–¢–≤–æ–∏ –±–æ–ª–µ–∑–Ω–∏:\n"
    now_dt = now()
    for d in user_data["diseases"]:
        remaining = d["end_time"] - now_dt
        if remaining.total_seconds() > 0:
            rem_str = f"–û—Å—Ç–∞–ª–æ—Å—å: {str(remaining).split('.')[0]}"
        else:
            rem_str = f"–ò—Å—Ç–µ–∫–ª–∞ {d['end_time'].strftime('%d.%m %H:%M')} (UTC)"
        start_str = d["start_time"].strftime('%d.%m %H:%M')
        text += f"{start_str} - {d['name']} - {rem_str}\n"
    await update.message.reply_text(text)


# --- –ê–¥–º–∏–Ω–∫–∞ ---

async def is_admin(update: Update):
    return update.effective_user.id == ADMIN_ID


async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/add —Ç–µ–∫—Å—Ç iq_change")
        return
    try:
        iq_change = int(context.args[-1])
    except:
        await update.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (iq_change).")
        return
    text = " ".join(context.args[:-1])
    async with lock:
        degrade_actions.append({"text": text, "iq_change": iq_change})
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n{text} ({iq_change} IQ)")


async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/del –Ω–æ–º–µ—Ä")
        return
    try:
        idx = int(context.args[0]) - 1
    except:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ.")
        return
    async with lock:
        if 0 <= idx < len(degrade_actions):
            removed = degrade_actions.pop(idx)
            await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ: {removed['text']}")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")


async def list_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return
    async with lock:
        if not degrade_actions:
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        msg = "–î–µ–π—Å—Ç–≤–∏—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
        for i, action in enumerate(degrade_actions, 1):
            iq_ch = action["iq_change"]
            sign = "+" if iq_ch > 0 else ""
            msg += f"{i}. {action['text']} ({sign}{iq_ch} IQ)\n"
    await update.message.reply_text(msg)


# --- –ë–æ–ª–µ–∑–Ω–∏ ---

async def add_disease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return
    # –§–æ—Ä–º–∞—Ç: /adddisease –∏–º—è –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–º–∏–Ω –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–º–∞–∫—Å
    if len(context.args) != 4:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/adddisease –∏–º—è –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª_–º–∏–Ω –¥–ª_–º–∞–∫—Å")
        return
    name = context.args[0]
    try:
        multiplier = float(context.args[1])
        dur_min = int(context.args[2])
        dur_max = int(context.args[3])
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        return
    async with lock:
        diseases_list.append(
            {"name": name, "multiplier": multiplier, "duration_min": dur_min, "duration_max": dur_max}
        )
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å: {name} (–º–Ω–æ–∂–∏—Ç–µ–ª—å {multiplier}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {dur_min}-{dur_max} —á.)")


async def list_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return
    async with lock:
        if not diseases_list:
            await update.message.reply_text("–ë–æ–ª–µ–∑–Ω–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        msg = "–°–ø–∏—Å–æ–∫ –±–æ–ª–µ–∑–Ω–µ–π:\n"
        for i, d in enumerate(diseases_list, 1):
            msg += f"{i}. {d['name']} ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å: {d['multiplier']}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {d['duration_min']}-{d['duration_max']} —á.\n"
    await update.message.reply_text(msg)


async def del_disease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/deldisease –Ω–æ–º–µ—Ä")
        return
    try:
        idx = int(context.args[0]) - 1
    except:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ.")
        return
    async with lock:
        if 0 <= idx < len(diseases_list):
            removed = diseases_list.pop(idx)
            await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å: {removed['name']}")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")


# --- –û—á–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –æ—á–∫–∏ ---

async def points_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/points_add @–Ω–∏–∫ –∫–æ–ª-–≤–æ")
        return
    username = context.args[0].lstrip("@")
    try:
        amount = int(context.args[1])
    except:
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    async with lock:
        # –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É
        found_id = None
        for uid, data in users.items():
            if data.get("username", "").lower() == username.lower():
                found_id = uid
                break
        if found_id is None:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        users[found_id]["points"] = users[found_id].get("points", 0) + amount
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}. –¢–µ–ø–µ—Ä—å: {users[found_id]['points']}.")


async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await ensure_user(user)
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/d —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã (–∑–∞ –æ—á–∫–∏)")
        return

    text = " ".join(context.args)
    user_data = users[user.id]
    cost = 20  # —Ü–µ–Ω–∞ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã

    if user_data.get("points", 0) < cost:
        await update.message.reply_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤. –ù—É–∂–Ω–æ {cost}, —É –≤–∞—Å {user_data.get('points', 0)}.")
        return

    async with lock:
        user_data["points"] -= cost
        user_custom_commands.append({"user_id": user.id, "text": text})

    await update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞ {cost} –æ—á–∫–æ–≤. –û—Å—Ç–∞—Ç–æ–∫ –æ—á–∫–æ–≤: {user_data['points']}.")


async def list_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return
    async with lock:
        if not user_custom_commands:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        for i, cmd in enumerate(user_custom_commands, 1):
            uid = cmd["user_id"]
            uname = users.get(uid, {}).get("username", f"User{uid}")
            msg += f"{i}. @{uname}: {cmd['text']}\n"
    await update.message.reply_text(msg)


# --- –°–±—Ä–æ—Å—ã ---

async def reset_iq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return
    async with lock:
        for u in users.values():
            u["iq"] = 100
    await update.message.reply_text("IQ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω –Ω–∞ 100.")


async def reset_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return
    async with lock:
        for u in users.values():
            u["diseases"] = []
    await update.message.reply_text("–í—Å–µ –±–æ–ª–µ–∑–Ω–∏ —É–¥–∞–ª–µ–Ω—ã —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


async def reset_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return
    async with lock:
        for u in users.values():
            u["points"] = 0
    await update.message.reply_text("–û—á–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã.")


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ ---

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("degrade", degrade))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("my", my))

    # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("del", delete))
    app.add_handler(CommandHandler("list", list_actions))

    # –ë–æ–ª–µ–∑–Ω–∏
    app.add_handler(CommandHandler("adddisease", add_disease))
    app.add_handler(CommandHandler("listdisease", list_diseases))
    app.add_handler(CommandHandler("deldisease", del_disease))

    # –û—á–∫–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("points_add", points_add))
    app.add_handler(CommandHandler("d", add_command))
    app.add_handler(CommandHandler("listcmd", list_commands))

    # –°–±—Ä–æ—Å—ã
    app.add_handler(CommandHandler("reset_iq", reset_iq))
    app.add_handler(CommandHandler("reset_diseases", reset_diseases))
    app.add_handler(CommandHandler("reset_points", reset_points))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()


if __name__ == "__main__":
    main()
