import asyncio
import random
from datetime import datetime, timedelta
from typing import Dict, List, Any

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "7909644376:AAHD8zFEV-hjsVSfZ4AdtceBi5u9-ywRHOQ"
GROUP_ID = -1001941069892
ADMIN_IDS = {6878462090}  # —Ç–≤–æ–π –∞–π–¥–∏ —Å—é–¥–∞

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ---

# –î–µ–π—Å—Ç–≤–∏—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å 'text' –∏ 'iq_delta' (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
degrade_actions: List[Dict[str, Any]] = []

# –ë–æ–ª–µ–∑–Ω–∏: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å 'name', 'iq_multiplier', 'min_duration', 'max_duration' (—á–∞—Å—ã)
diseases: List[Dict[str, Any]] = []

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å 'text', 'iq_delta', 'user_id'
user_commands: List[Dict[str, Any]] = []

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:
# user_id -> {"iq": int, "ultra": int, "last_degrade": datetime, "diseases": List[Dict]}
users: Dict[int, Dict[str, Any]] = {}

# –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–∑–Ω—å –ø—Ä–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
disease_chance = 20

# –°–º–∞–π–ª—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞–Ω–¥–æ–º)
smiles = ["üéâ", "üëΩ", "ü§¢", "üòµ‚Äçüí´", "üß†", "üí•", "üî•", "‚ùå", "‚ö°", "üíÄ"]


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


def get_user_data(user_id: int) -> Dict[str, Any]:
    if user_id not in users:
        users[user_id] = {
            "iq": 100,
            "ultra": 0,
            "last_degrade": datetime.min,
            "diseases": [],  # –∫–∞–∂–¥–∞—è –±–æ–ª–µ–∑–Ω—å: {"name": str, "end_time": datetime, "iq_multiplier": float}
        }
    return users[user_id]


def calc_iq_loss(base_iq_loss: int, user_data: Dict[str, Any]) -> int:
    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –±–æ–ª–µ–∑–Ω–µ–π
    multiplier = 1.0
    now = datetime.utcnow()
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±–æ–ª–µ–∑–Ω–∏
    user_data["diseases"] = [
        dis for dis in user_data["diseases"] if dis["end_time"] > now
    ]
    for dis in user_data["diseases"]:
        multiplier += dis["iq_multiplier"]
    total_loss = int(base_iq_loss * multiplier)
    return total_loss


def format_diseases(user_data: Dict[str, Any]) -> str:
    if not user_data["diseases"]:
        return "–ù–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π."
    now = datetime.utcnow()
    lines = []
    for dis in user_data["diseases"]:
        remain = dis["end_time"] - now
        if remain.total_seconds() > 0:
            h = remain.total_seconds() // 3600
            m = (remain.total_seconds() % 3600) // 60
            lines.append(
                f"{dis['name']} ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å {int(h)}—á {int(m)}–º"
            )
        else:
            lines.append(f"{dis['name']} ‚Äî –±–æ–ª–µ–∑–Ω—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å")
    return "\n".join(lines)


def random_smile() -> str:
    return random.choice(smiles)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ IQ. –ò—Å–ø–æ–ª—å–∑—É–π /degrade –¥–ª—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏, /top –¥–ª—è —Ç–æ–ø–∞ –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã."
    )


async def degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != GROUP_ID:
        return
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)

    now = datetime.utcnow()
    if (now - user_data["last_degrade"]).total_seconds() < 3600:
        remain = 3600 - (now - user_data["last_degrade"]).total_seconds()
        m = int(remain // 60)
        s = int(remain % 60)
        await update.message.reply_text(f"‚è≥ –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {m} –º–∏–Ω {s} —Å–µ–∫")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö
    all_actions = degrade_actions + user_commands
    if not all_actions:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏.")
        return

    action = random.choice(all_actions)
    base_iq_loss = abs(action["iq_delta"])

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–∑–Ω–∏
    iq_loss = calc_iq_loss(base_iq_loss, user_data)

    # –ú–∏–Ω—É—Å IQ
    user_data["iq"] -= iq_loss

    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–∑–Ω—å
    if diseases and random.randint(1, 100) <= disease_chance:
        new_disease = random.choice(diseases)
        dur_hours = random.randint(new_disease["min_duration"], new_disease["max_duration"])
        end_time = now + timedelta(hours=dur_hours)
        user_data["diseases"].append({
            "name": new_disease["name"],
            "iq_multiplier": new_disease["iq_multiplier"],
            "end_time": end_time,
        })
        disease_msg = (
            f"\n{random_smile()} –í—ã –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏ –±–æ–ª–µ–∑–Ω—å: {new_disease['name']}! "
            f"–¢–µ–ø–µ—Ä—å –≤–∞—à IQ –±—É–¥–µ—Ç –ø–∞–¥–∞—Ç—å –Ω–∞ {int(new_disease['iq_multiplier'] * 100)}% –±–æ–ª—å—à–µ."
        )
    else:
        disease_msg = ""

    user_data["last_degrade"] = now

    text = f"{action['text']}, —Ç–≤–æ–π IQ —É–ø–∞–ª –Ω–∞ {iq_loss} {random_smile()}\n–°–µ–π—á–∞—Å IQ: {user_data['iq']}{disease_msg}"
    await update.message.reply_text(text)


async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != GROUP_ID:
        return
    if not users:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ IQ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    sorted_users = sorted(users.items(), key=lambda x: x[1]["iq"], reverse=True)
    msg = "üèÜ –¢–æ–ø –ø–æ IQ:\n"
    for i, (uid, data) in enumerate(sorted_users[:10], 1):
        try:
            user = await context.bot.get_chat(uid)
            name = user.first_name
        except Exception:
            name = str(uid)
        msg += f"{i}. {name} ‚Äî IQ: {data['iq']}\n"
    await update.message.reply_text(msg)


async def my(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    iq = user_data["iq"]
    ultra = user_data["ultra"]
    diseases_text = format_diseases(user_data)
    last_deg = user_data["last_degrade"]
    now = datetime.utcnow()
    cooldown = max(0, 3600 - (now - last_deg).total_seconds())
    m = int(cooldown // 60)
    s = int(cooldown % 60)

    text = (
        f"–¢–≤–æ–π IQ: {iq}\n"
        f"Ultra –æ—á–∫–æ–≤: {ultra}\n"
        f"–ë–æ–ª–µ–∑–Ω–∏:\n{diseases_text}\n"
        f"–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑: {m} –º–∏–Ω {s} —Å–µ–∫"
    )
    await update.message.reply_text(text)


async def add_degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /add <—Ç–µ–∫—Å—Ç> <–º–∏–Ω—É—Å_iq>")
        return
    *text_parts, iq_str = context.args
    text = " ".join(text_parts)
    try:
        iq_delta = int(iq_str)
    except ValueError:
        await update.message.reply_text("‚ùå IQ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º).")
        return
    if iq_delta >= 0:
        await update.message.reply_text("‚ùå IQ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    degrade_actions.append({"text": text, "iq_delta": iq_delta})
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n{text} ({iq_delta} IQ)")


async def del_degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if not context.args:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /del <–Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è>")
        return
    try:
        idx = int(context.args[0]) - 1
    except ValueError:
        await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if 0 <= idx < len(degrade_actions):
        removed = degrade_actions.pop(idx)
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {removed['text']}")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è.")


async def add_disease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if len(context.args) < 4:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /adddisease <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–Ω–æ–∂–∏—Ç–µ–ª—å> <–º–∏–Ω. —á–∞—Å—ã> <–º–∞–∫—Å. —á–∞—Å—ã>")
        return
    name = context.args[0]
    try:
        multiplier = float(context.args[1])
        min_h = int(context.args[2])
        max_h = int(context.args[3])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ú–Ω–æ–∂–∏—Ç–µ–ª—å - —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, —á–∞—Å—ã - —Ü–µ–ª—ã–µ.")
        return
    if min_h > max_h or min_h <= 0 or max_h <= 0:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å–æ–≤.")
        return
    diseases.append({
        "name": name,
        "iq_multiplier": multiplier,
        "min_duration": min_h,
        "max_duration": max_h
    })
    await update.message.reply_text(f"‚úÖ –ë–æ–ª–µ–∑–Ω—å '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")


async def del_disease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if not context.args:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /deldisease <–Ω–æ–º–µ—Ä –±–æ–ª–µ–∑–Ω–∏>")
        return
    try:
        idx = int(context.args[0]) - 1
    except ValueError:
        await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if 0 <= idx < len(diseases):
        removed = diseases.pop(idx)
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å: {removed['name']}")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–æ–ª–µ–∑–Ω–∏.")


async def list_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not diseases:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.")
        return
    text = "–ë–æ–ª–µ–∑–Ω–∏:\n"
    for i, d in enumerate(diseases, 1):
        text += (f"{i}. {d['name']} ‚Äî –ú–Ω–æ–∂–∏—Ç–µ–ª—å IQ: {d['iq_multiplier']}, "
                 f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –æ—Ç {d['min_duration']}—á –¥–æ {d['max_duration']}—á\n")
    await update.message.reply_text(text)


async def add_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if len(context.args) < 1:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /d <—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã>")
        return
    user_data = get_user_data(user_id)
    if user_data["ultra"] < 1:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç ultra –æ—á–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return
    text = " ".join(context.args)
    user_commands.append({"text": text, "iq_delta": -1, "user_id": user_id})
    user_data["ultra"] -= 1
    await update.message.reply_text(f"‚úÖ –¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–π. –û—Å—Ç–∞–ª–æ—Å—å ultra –æ—á–∫–æ–≤: {user_data['ultra']}")


async def list_user_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not user_commands:
        await update.message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏.")
        return
    text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
    for i, cmd in enumerate(user_commands, 1):
        user_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        try:
            user = await context.bot.get_chat(cmd["user_id"])
            user_name = user.first_name
        except Exception:
            pass
        text += f"{i}. {cmd['text']} (–æ—Ç {user_name})\n"
    await update.message.reply_text(text)


async def set_iq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /setiq <id> <–∑–Ω–∞—á–µ–Ω–∏–µ>")
        return
    try:
        target_id = int(context.args[0])
        new_iq = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå ID –∏ IQ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    target_data = get_user_data(target_id)
    target_data["iq"] = new_iq
    await update.message.reply_text(f"‚úÖ IQ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {new_iq}")


async def set_ultra(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /setultra <id> <–∑–Ω–∞—á–µ–Ω–∏–µ>")
        return
    try:
        target_id = int(context.args[0])
        new_ultra = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå ID –∏ ultra –æ—á–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    target_data = get_user_data(target_id)
    target_data["ultra"] = new_ultra
    await update.message.reply_text(f"‚úÖ Ultra –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ {new_ultra}")


async def reset_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    for uid in users:
        users[uid]["iq"] = 100
        users[uid]["ultra"] = 0
        users[uid]["diseases"] = []
    degrade_actions.clear()
    diseases.clear()
    user_commands.clear()
    await update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")


async def reset_diseases_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    for uid in users:
        users[uid]["diseases"] = []
    await update.message.reply_text("‚úÖ –ë–æ–ª–µ–∑–Ω–∏ —É –≤—Å–µ—Ö —Å–±—Ä–æ—à–µ–Ω—ã.")


async def set_disease_chance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    global disease_chance
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if not context.args:
        await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π —à–∞–Ω—Å –∑–∞–±–æ–ª–µ—Ç—å: {disease_chance}%")
        return
    try:
        new_chance = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if not 0 <= new_chance <= 100:
        await update.message.reply_text("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100.")
        return
    disease_chance = new_chance
    await update.message.reply_text(f"‚úÖ –®–∞–Ω—Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {disease_chance}%")


async def admin_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return

    text = "=== –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ===\n\n"

    text += "–î–µ–π—Å—Ç–≤–∏—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
    if degrade_actions:
        for i, act in enumerate(degrade_actions, 1):
            text += f"{i}. {act['text']} (IQ {act['iq_delta']})\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π.\n"

    text += "\n–ë–æ–ª–µ–∑–Ω–∏:\n"
    if diseases:
        for i, dis in enumerate(diseases, 1):
            text += (f"{i}. {dis['name']} ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å IQ: {dis['iq_multiplier']}, "
                     f"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –æ—Ç {dis['min_duration']}—á –¥–æ {dis['max_duration']}—á\n")
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.\n"

    text += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
    if user_commands:
        for i, cmd in enumerate(user_commands, 1):
            try:
                user = await context.bot.get_chat(cmd["user_id"])
                user_name = user.first_name
            except Exception:
                user_name = str(cmd["user_id"])
            text += f"{i}. {cmd['text']} (–æ—Ç {user_name})\n"
    else:
        text += "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.\n"

    text += f"\n–®–∞–Ω—Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {disease_chance}%\n"

    await update.message.reply_text(text)


async def d_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # /d <—Ç–µ–∫—Å—Ç> ‚Äî —Å–ø–∏—Å—ã–≤–∞–µ—Ç 1 ultra –æ—á–∫–æ, –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)

    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /d <—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã>")
        return

    if user_data["ultra"] < 1:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç ultra –æ—á–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return

    text = " ".join(context.args)
    user_commands.append({"text": text, "iq_delta": -1, "user_id": user_id})
    user_data["ultra"] -= 1

    await update.message.reply_text(f"‚úÖ –¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–π. –û—Å—Ç–∞–ª–æ—Å—å ultra –æ—á–∫–æ–≤: {user_data['ultra']}")


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("degrade", degrade))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("my", my))

    app.add_handler(CommandHandler("add", add_degrade))
    app.add_handler(CommandHandler("del", del_degrade))
    app.add_handler(CommandHandler("adddisease", add_disease))
    app.add_handler(CommandHandler("deldisease", del_disease))
    app.add_handler(CommandHandler("listdiseases", list_diseases))
    app.add_handler(CommandHandler("listusercommands", list_user_commands))
    app.add_handler(CommandHandler("setiq", set_iq))
    app.add_handler(CommandHandler("setultra", set_ultra))
    app.add_handler(CommandHandler("resetall", reset_all))
    app.add_handler(CommandHandler("resetdiseases", reset_diseases_all))
    app.add_handler(CommandHandler("setdiseasechance", set_disease_chance))
    app.add_handler(CommandHandler("eair", admin_info))
    app.add_handler(CommandHandler("d", d_command))

    print("Bot started...")
    app.run_polling()


if __name__ == "__main__":
    main()
