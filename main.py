import random
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

TOKEN = "7909644376:AAHD8zFEV-hjsVSfZ4AdtceBi5u9-ywRHOQ"
GROUP_ID = -1001941069892
ADMIN_ID = 6878462090
INITIAL_IQ = 100

EMOJIS = ["üéâ", "üëΩ", "ü§¢", "üòµ", "üß†", "üí•", "üî•", "‚ùå"]

def random_emoji():
    return random.choice(EMOJIS)

users = {}  # user_id: {"iq": int, "last_degrade": datetime, "diseases": [disease_names]}
actions = []  # {"text": str, "iq_drop": int}
diseases = []  # {"name": str, "multiplier": float}

def is_admin(user_id):
    return user_id == ADMIN_ID

async def degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != GROUP_ID:
        return

    user_id = update.effective_user.id
    now = datetime.utcnow()

    if user_id not in users:
        users[user_id] = {"iq": INITIAL_IQ, "last_degrade": None, "diseases": []}

    user = users[user_id]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞ (1 —á–∞—Å)
    if user["last_degrade"] and now - user["last_degrade"] < timedelta(hours=1):
        left = timedelta(hours=1) - (now - user["last_degrade"])
        mins, secs = divmod(left.seconds, 60)
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {mins} –º–∏–Ω {secs} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏.")
        return

    if not actions:
        await update.message.reply_text("‚ö†Ô∏è –ê–¥–º–∏–Ω –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏.")
        return

    action = random.choice(actions)

    base_drop = action["iq_drop"]
    # –°—á–∏—Ç–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –±–æ–ª–µ–∑–Ω–µ–π
    multiplier = 1.0 + sum(d["multiplier"] for d in diseases if d["name"] in user["diseases"])

    drop = int(base_drop * multiplier)
    user["iq"] -= drop
    user["last_degrade"] = now

    text = f"{action['text']}, —Ç–≤–æ–π IQ —É–ø–∞–ª –Ω–∞ {drop} {random_emoji()}\n–°–µ–π—á–∞—Å IQ: {user['iq']} {random_emoji()}"

    # –†–∞–Ω–¥–æ–º–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –±–æ–ª–µ–∑–Ω—å 10%
    if diseases and random.random() < 0.1:
        new_disease = random.choice(diseases)
        if new_disease["name"] not in user["diseases"]:
            user["diseases"].append(new_disease["name"])
            text += f"\n\nü§¢ –¢—ã –ø–æ–¥—Ö–≤–∞—Ç–∏–ª –±–æ–ª–µ–∑–Ω—å: {new_disease['name']}! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π IQ –ø–∞–¥–∞–µ—Ç –Ω–∞ {int(new_disease['multiplier']*100)}% –±–æ–ª—å—à–µ."

    await update.message.reply_text(text)

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != GROUP_ID:
        return

    if not users:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ IQ.")
        return

    top_list = sorted(users.items(), key=lambda x: x[1]["iq"], reverse=True)[:10]
    text = "üèÜ –¢–æ–ø –ø–æ IQ:\n"
    for i, (uid, data) in enumerate(top_list, 1):
        text += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}: IQ {data['iq']} {random_emoji()}\n"
    await update.message.reply_text(text)

async def my(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users.get(user_id)
    if not user:
        await update.message.reply_text("–¢—ã –µ—â–µ –Ω–µ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–ª, IQ 100.")
        return

    if not user["diseases"]:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.")
    else:
        text = "–¢–≤–æ–∏ –±–æ–ª–µ–∑–Ω–∏:\n" + "\n".join(user["diseases"])
        await update.message.reply_text(text)

# –ê–¥–º–∏–Ω–∫–∞: /add <—Ç–µ–∫—Å—Ç> <–º–∏–Ω—É—Å_iq>
async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /add <—Ç–µ–∫—Å—Ç> <–º–∏–Ω—É—Å_iq>")
        return

    try:
        iq_drop = int(args[-1])
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–º–∏–Ω—É—Å IQ).")
        return

    text = " ".join(args[:-1])
    actions.append({"text": text, "iq_drop": iq_drop})
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {text} (-{iq_drop} IQ)")

# –ê–¥–º–∏–Ω–∫–∞: /del <–Ω–æ–º–µ—Ä>
async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    args = context.args
    if len(args) != 1 or not args[0].isdigit():
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /del <–Ω–æ–º–µ—Ä>")
        return

    idx = int(args[0]) - 1
    if idx < 0 or idx >= len(actions):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    removed = actions.pop(idx)
    await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {removed['text']}")

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è /list
async def list_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    if not actions:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
        return

    text = "–î–µ–π—Å—Ç–≤–∏—è:\n"
    for i, a in enumerate(actions, 1):
        text += f"{i}. {a['text']} (-{a['iq_drop']} IQ)\n"
    await update.message.reply_text(text)

# –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–∑–Ω—å: /adddisease <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–Ω–æ–∂–∏—Ç–µ–ª—å>
async def add_disease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /adddisease <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–Ω–æ–∂–∏—Ç–µ–ª—å>")
        return

    try:
        multiplier = float(args[-1])
    except ValueError:
        await update.message.reply_text("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.3 –¥–ª—è +30%).")
        return

    name = " ".join(args[:-1])
    diseases.append({"name": name, "multiplier": multiplier})
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å: {name} (IQ –ø–∞–¥–∞–µ—Ç –Ω–∞ {int(multiplier*100)}% –±–æ–ª—å—à–µ)")

# –°–±—Ä–æ—Å–∏—Ç—å IQ –∏ –±–æ–ª–µ–∑–Ω–∏ —É –≤—Å–µ—Ö: /reset
async def reset_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    for user in users.values():
        user["iq"] = INITIAL_IQ
        user["diseases"] = []
        user["last_degrade"] = None

    await update.message.reply_text("‚úÖ –í—Å–µ IQ –∏ –±–æ–ª–µ–∑–Ω–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –¥–ª—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ IQ –∑–∞–ø—É—â–µ–Ω!")

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("degrade", degrade))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("my", my))

    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("del", delete))
    app.add_handler(CommandHandler("list", list_actions))
    app.add_handler(CommandHandler("adddisease", add_disease))
    app.add_handler(CommandHandler("reset", reset_all))

    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    app.run_polling()

if __name__ == "__main__":
    main()
