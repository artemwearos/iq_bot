import asyncio
import random
from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

TOKEN = "7909644376:AAHD8zFEV-hjsVSfZ4AdtceBi5u9-ywRHOQ"
ADMIN_ID = 6878462090
GROUP_ID = -1001941069892

lock = asyncio.Lock()

# –î–∞–Ω–Ω—ã–µ
users = {}  # user_id: {"iq": int, "last_degrade": datetime, "points": int, "d_commands": [str], "d_used": int}
degrade_actions = []  # [{"text": str, "iq_change": int}]
d_user_commands = []  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ (—Å–ø–∏—Å–æ–∫ dict {"user_id", "text"})
diseases = []  # [{"name": str, "iq_multiplier": float, "min_hours": int, "max_hours": int}]
user_diseases = {}  
# user_id: [{"name": str, "start": datetime, "duration": timedelta}]

emojis = ["üéâ", "üëΩ", "ü§¢", "üî•", "üòµ", "üß†", "üí•", "üòà", "üò±", "ü§°"]

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

def now_utc():
    return datetime.utcnow()

async def add_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <—Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è> <–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ IQ>")
        return
    try:
        iq_change = int(context.args[-1])
        if iq_change >= 0:
            await update.message.reply_text("IQ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
    except:
        await update.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º).")
        return
    text = " ".join(context.args[:-1])
    async with lock:
        degrade_actions.append({"text": text, "iq_change": iq_change})
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {text} ({iq_change} IQ)")

async def del_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del <–Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è>")
        return
    try:
        idx = int(context.args[0]) - 1
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è (—á–∏—Å–ª–æ).")
        return
    async with lock:
        if 0 <= idx < len(degrade_actions):
            removed = degrade_actions.pop(idx)
            await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {removed['text']}")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è.")

async def eair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    msg = "–î–µ–π—Å—Ç–≤–∏—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
    async with lock:
        if degrade_actions:
            for i, a in enumerate(degrade_actions, 1):
                msg += f"{i}. {a['text']} ({a['iq_change']} IQ)\n"
        else:
            msg += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π.\n"
        msg += "\n–ë–æ–ª–µ–∑–Ω–∏:\n"
        if diseases:
            for i, d in enumerate(diseases,1):
                msg += f"{i}. {d['name']} | –ú–Ω–æ–∂–∏—Ç–µ–ª—å IQ: {d['iq_multiplier']} | –°—Ä–æ–∫ (—á–∞—Å—ã): {d['min_hours']}‚Äì{d['max_hours']}\n"
        else:
            msg += "–ü–æ–∫–∞ –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.\n"
        msg += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
        if d_user_commands:
            for i, cmd in enumerate(d_user_commands,1):
                msg += f"{i}. {cmd['text']} (–æ—Ç {cmd['user_id']})\n"
        else:
            msg += "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.\n"
    try:
        await context.bot.send_message(chat_id=update.effective_user.id, text=msg)
    except:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –±–æ—Ç—É –≤ –õ–°, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def add_disease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if len(context.args) < 4:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adddisease <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–Ω–æ–∂–∏—Ç–µ–ª—å IQ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1.3)> <–º–∏–Ω —á–∞—Å—ã> <–º–∞–∫—Å —á–∞—Å—ã>")
        return
    try:
        iq_mult = float(context.args[-3])
        min_h = int(context.args[-2])
        max_h = int(context.args[-1])
        if min_h > max_h or min_h <= 0:
            await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å–æ–≤.")
            return
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ú–Ω–æ–∂–∏—Ç–µ–ª—å - —á–∏—Å–ª–æ, —á–∞—Å—ã - —Ü–µ–ª—ã–µ.")
        return
    name = " ".join(context.args[:-3])
    async with lock:
        diseases.append({"name": name, "iq_multiplier": iq_mult, "min_hours": min_h, "max_hours": max_h})
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å: {name}, –º–Ω–æ–∂–∏—Ç–µ–ª—å IQ: {iq_mult}, —Å—Ä–æ–∫ {min_h}‚Äì{max_h} —á–∞—Å–æ–≤.")

async def del_disease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deldisease <–Ω–æ–º–µ—Ä –±–æ–ª–µ–∑–Ω–∏>")
        return
    try:
        idx = int(context.args[0]) - 1
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–æ–ª–µ–∑–Ω–∏.")
        return
    async with lock:
        if 0 <= idx < len(diseases):
            removed = diseases.pop(idx)
            await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å: {removed['name']}")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")

async def user_diseases_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = now_utc()
    async with lock:
        ud = user_diseases.get(user_id, [])
    if not ud:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.")
        return
    msg = "–í–∞—à–∏ –±–æ–ª–µ–∑–Ω–∏:\n"
    for d in ud:
        end_time = d["start"] + d["duration"]
        if now > end_time:
            msg += f"{d['name']} ‚Äî –∏—Å—Ç–µ–∫–ª–∞ –≤ {end_time.strftime('%Y-%m-%d %H:%M:%S')} UTC\n"
        else:
            remain = end_time - now
            hrs = remain.total_seconds() // 3600
            mins = (remain.total_seconds() % 3600) // 60
            msg += f"{d['name']} ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å {int(hrs)} —á {int(mins)} –º–∏–Ω\n"
    await update.message.reply_text(msg)

async def reset_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    async with lock:
        users.clear()
        user_diseases.clear()
    await update.message.reply_text("–°–±—Ä–æ—à–µ–Ω—ã IQ, —Ç–∞–π–º–µ—Ä—ã –∏ –±–æ–ª–µ–∑–Ω–∏ —É –≤—Å–µ—Ö.")

async def reset_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    async with lock:
        user_diseases.clear()
    await update.message.reply_text("–°–±—Ä–æ—à–µ–Ω—ã –≤—Å–µ –±–æ–ª–µ–∑–Ω–∏ —É –≤—Å–µ—Ö.")

async def change_iq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /changeiq <user_id> <–Ω–æ–≤—ã–π IQ>")
        return
    try:
        uid = int(context.args[0])
        new_iq = int(context.args[1])
    except:
        await update.message.reply_text("–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    async with lock:
        u = users.get(uid)
        if not u:
            u = {"iq": new_iq, "last_degrade": datetime.min, "points": 0, "d_used":0}
            users[uid] = u
        else:
            u["iq"] = new_iq
    await update.message.reply_text(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} IQ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {new_iq}.")

def get_iq_multiplier(user_id: int):
    now = now_utc()
    mult = 1.0
    async def _mult():
        nonlocal mult
        async with lock:
            ud = user_diseases.get(user_id, [])
            for d in ud:
                end = d["start"] + d["duration"]
                if now < end:
                    mult += d["iq_multiplier"] - 1
    return mult

async def degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != GROUP_ID:
        return
    user_id = update.effective_user.id
    now = now_utc()
    async with lock:
        user = users.get(user_id)
        if not user:
            user = {"iq": 100, "last_degrade": datetime.min, "points": 0, "d_used": 0}
            users[user_id] = user
        elapsed = (now - user["last_degrade"]).total_seconds()
        if elapsed < 3600:
            left = int((3600 - elapsed) // 60)
            await update.message.reply_text(f"–ú–æ–∂–Ω–æ —Ä–∞–∑ –≤ —á–∞—Å. –û—Å—Ç–∞–ª–æ—Å—å {left} –º–∏–Ω.")
            return
        if not degrade_actions:
            await update.message.reply_text("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏.")
            return

        # –ë–æ–Ω—É—Å –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç –±–æ–ª–µ–∑–Ω–µ–π
        mult = 1.0
        ud = user_diseases.get(user_id, [])
        for d in ud:
            end = d["start"] + d["duration"]
            if now < end:
                mult += d["iq_multiplier"] - 1

        action = random.choice(degrade_actions)
        base_iq_drop = action["iq_change"]
        iq_drop = int(base_iq_drop * mult)
        emoji = random.choice(emojis)
        user["iq"] += iq_drop
        user["last_degrade"] = now

        # –®–∞–Ω—Å –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –±–æ–ª–µ–∑–Ω—å
        chance = 10  # –Ω–∞–ø—Ä–∏–º–µ—Ä 10%
        if diseases and random.randint(1, 100) <= chance:
            disease = random.choice(diseases)
            duration_hours = random.randint(disease["min_hours"], disease["max_hours"])
            duration = timedelta(hours=duration_hours)
            if user_id not in user_diseases:
                user_diseases[user_id] = []
            user_diseases[user_id].append({
                "name": disease["name"],
                "start": now,
                "duration": duration,
                "iq_multiplier": disease["iq_multiplier"],
            })
            disease_msg = f"\nü§¢ –í—ã –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏ {disease['name']}! –¢–µ–ø–µ—Ä—å –≤–∞—à IQ –ø–∞–¥–∞–µ—Ç –Ω–∞ {int((disease['iq_multiplier'] -1)*100)}% –±–æ–ª—å—à–µ."
        else:
            disease_msg = ""

    msg = f"{update.effective_user.first_name}, {action['text']} {emoji}\nIQ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {iq_drop} –∏ —Ç–µ–ø–µ—Ä—å: {user['iq']}{disease_msg}"
    await update.message.reply_text(msg)

async def add_d_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /d <—Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã>")
        return
    text = " ".join(context.args)
    async with lock:
        user = users.get(user_id)
        if not user:
            users[user_id] = {"iq": 100, "last_degrade": datetime.min, "points": 0, "d_used": 0}
            user = users[user_id]
        if user["points"] < 1:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—á–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏.")
            return
        d_user_commands.append({"user_id": user_id, "text": text})
        user["points"] -= 1
    await update.message.reply_text(f"–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Å—Ç–æ–∏—Ç 1 –æ—á–∫–æ. –û—Å—Ç–∞–ª–æ—Å—å –æ—á–∫–æ–≤: {user['points']}")

async def admin_show_d_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    async with lock:
        if not d_user_commands:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç.")
            return
        msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
        for i, cmd in enumerate(d_user_commands, 1):
            msg += f"{i}. {cmd['text']} (–æ—Ç {cmd['user_id']})\n"
    await update.message.reply_text(msg)

async def admin_remove_d_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_d <–Ω–æ–º–µ—Ä>")
        return
    try:
        idx = int(context.args[0]) - 1
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã.")
        return
    async with lock:
        if 0 <= idx < len(d_user_commands):
            d_user_commands.pop(idx)
            await update.message.reply_text("–£–¥–∞–ª–µ–Ω–æ.")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")

async def add_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpoints <user_id> <–∫–æ–ª-–≤–æ>")
        return
    try:
        uid = int(context.args[0])
        pts = int(context.args[1])
    except:
        await update.message.reply_text("–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    async with lock:
        user = users.get(uid)
        if not user:
            users[uid] = {"iq": 100, "last_degrade": datetime.min, "points": pts, "d_used":0}
        else:
            user["points"] += pts
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –¥–æ–±–∞–≤–ª–µ–Ω–æ {pts} –æ—á–∫–æ–≤.")

async def show_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    async with lock:
        user = users.get(user_id)
        pts = user["points"] if user else 0
    await update.message.reply_text(f"–£ –≤–∞—Å {pts} –æ—á–∫–æ–≤.")

async def show_iq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    async with lock:
        user = users.get(user_id)
        iq = user["iq"] if user else 100
    await update.message.reply_text(f"–í–∞—à IQ: {iq}")

async def my_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await user_diseases_list(update, context)

async def top_iq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with lock:
        sorted_users = sorted(users.items(), key=lambda x: x[1].get("iq", 0), reverse=True)[:10]
    msg = "–¢–æ–ø IQ:\n"
    for i, (uid, data) in enumerate(sorted_users, 1):
        try:
            user = await context.bot.get_chat(uid)
            name = user.first_name
        except:
            name = str(uid)
        msg += f"{i}. {name} - {data.get('iq', 100)}\n"
    await update.message.reply_text(msg)

async def help_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    msg = (
        "/add <—Ç–µ–∫—Å—Ç> <–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ IQ> - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏\n"
        "/del <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/eair - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π, –±–æ–ª–µ–∑–Ω–µ–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥\n"
        "/adddisease <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–Ω–æ–∂–∏—Ç–µ–ª—å> <–º–∏–Ω —á–∞—Å—ã> <–º–∞–∫—Å —á–∞—Å—ã> - –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–∑–Ω—å\n"
        "/deldisease <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –±–æ–ª–µ–∑–Ω—å\n"
        "/resetall - —Å–±—Ä–æ—Å–∏—Ç—å IQ, –±–æ–ª–µ–∑–Ω–∏ –∏ —Ç–∞–π–º–µ—Ä—ã –≤—Å–µ–º\n"
        "/resetdiseases - —Å–±—Ä–æ—Å–∏—Ç—å –±–æ–ª–µ–∑–Ω–∏ –≤—Å–µ–º\n"
        "/changeiq <user_id> <–∑–Ω–∞—á–µ–Ω–∏–µ> - –∏–∑–º–µ–Ω–∏—Ç—å IQ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/addpoints <user_id> <–∫–æ–ª-–≤–æ> - –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏\n"
        "/dcommands - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "/del_d <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É\n"
    )
    await update.message.reply_text(msg)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_admin))
    app.add_handler(CommandHandler("add", add_action))
    app.add_handler(CommandHandler("del", del_action))
    app.add_handler(CommandHandler("eair", eair))
    app.add_handler(CommandHandler("adddisease", add_disease))
    app.add_handler(CommandHandler("deldisease", del_disease))
    app.add_handler(CommandHandler("my", my_diseases))
    app.add_handler(CommandHandler("resetall", reset_all))
    app.add_handler(CommandHandler("resetdiseases", reset_diseases))
    app.add_handler(CommandHandler("changeiq", change_iq))
    app.add_handler(CommandHandler("addpoints", add_points))
    app.add_handler(CommandHandler("d", add_d_command))
    app.add_handler(CommandHandler("dcommands", admin_show_d_commands))
    app.add_handler(CommandHandler("del_d", admin_remove_d_command))
    app.add_handler(CommandHandler("points", show_points))
    app.add_handler(CommandHandler("iq", show_iq))
    app.add_handler(CommandHandler("top", top_iq))
    app.add_handler(CommandHandler("degrade", degrade))

    app.run_polling()

if __name__ == "__main__":
    main()
