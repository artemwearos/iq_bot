import json
import random
import time
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "7909644376:AAHD8zFEV-hjsVSfZ4AdtceBi5u9-ywRHOQ"  # <-- —Ç–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
GROUP_ID = -1001941069892
ADMIN_ID = 6878462090  # <-- —Ç–≤–æ–π Telegram ID
EMOJIS = ["üòÇ", "üí©", "ü§°", "üî•", "üòé", "üêí", "üëΩ", "üíÄ", "ü•¥", "üçå", "ü§Ø", "üéâ", "üß†", "üç∫"]

# === –§–ê–ô–õ–´ ===
USERS_FILE = "users.json"
MESSAGES_FILE = "messages.json"

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò ===
def load_data(file, default):
    try:
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return default

def save_data(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_data(USERS_FILE, {})
messages_list = load_data(MESSAGES_FILE, [
    {"text": "—Ç—ã –∫—É–ø–∏–ª –∞–π—Ñ–æ–Ω –≤ –∫—Ä–µ–¥–∏—Ç", "delta": 3},
    {"text": "—Ç—ã —Å–ø–æ—Ä–∏–ª —Å –±–æ—Ç–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "delta": 2}
])

# === –ë–û–¢ ===
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === /degrade ===
@dp.message(Command("degrade"))
async def degrade(msg: Message):
    if msg.chat.id != GROUP_ID:
        return
    
    user_id = str(msg.from_user.id)
    now = time.time()

    if user_id not in users:
        users[user_id] = {"iq": 100, "last_time": 0}

    if now - users[user_id]["last_time"] < 3600:
        await msg.reply("‚è≥ –î–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —á–∞—Å.")
        return

    action = random.choice(messages_list)
    emoji = random.choice(EMOJIS)
    users[user_id]["iq"] -= action["delta"]
    users[user_id]["last_time"] = now
    save_data(USERS_FILE, users)

    await msg.reply(
        f"{action['text']}, —Ç–≤–æ–π IQ —É–ø–∞–ª –Ω–∞ {action['delta']} {emoji}\n"
        f"—Å–µ–π—á–∞—Å —Ç–≤–æ–π IQ {users[user_id]['iq']} {random.choice(EMOJIS)}"
    )

# === /top ===
@dp.message(Command("top"))
async def top(msg: Message):
    if msg.chat.id != GROUP_ID:
        return
    
    sorted_users = sorted(users.items(), key=lambda x: x[1]["iq"])
    text = "üèÜ –¢–æ–ø –¥–µ–≥—Ä–∞–¥–∞–Ω—Ç–æ–≤:\n"
    for i, (uid, data) in enumerate(sorted_users[:10], start=1):
        try:
            user = await bot.get_chat_member(GROUP_ID, int(uid))
            name = user.user.full_name
        except:
            name = f"User {uid}"
        text += f"{i}. {name} ‚Äî {data['iq']} üß†\n"

    await msg.reply(text)

# === /eair (–∞–¥–º–∏–Ω–∫–∞) ===
@dp.message(Command("eair"))
async def eair(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        return
    
    if msg.chat.type != "private":
        await msg.reply("–ü–∏—à–∏ –≤ –ª–∏—á–∫—É.")
        return

    await msg.reply("–ê–¥–º–∏–Ω–∫–∞: /add <—Ç–µ–∫—Å—Ç> <–º–∏–Ω—É—Å_iq>\n–£–¥–∞–ª–µ–Ω–∏–µ: /del <–Ω–æ–º–µ—Ä>")

@dp.message(Command("add"))
async def add_message(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        return
    try:
        _, text, delta = msg.text.split(" ", 2)
        messages_list.append({"text": text, "delta": int(delta)})
        save_data(MESSAGES_FILE, messages_list)
        await msg.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    except:
        await msg.reply("‚ùå –§–æ—Ä–º–∞—Ç: /add —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ")

@dp.message(Command("del"))
async def del_message(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        return
    try:
        idx = int(msg.text.split()[1]) - 1
        messages_list.pop(idx)
        save_data(MESSAGES_FILE, messages_list)
        await msg.reply("‚úÖ –£–¥–∞–ª–µ–Ω–æ.")
    except:
        await msg.reply("‚ùå –û—à–∏–±–∫–∞.")

# === –ó–ê–ü–£–°–ö ===
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
