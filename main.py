import random
import time
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TOKEN = "7909644376:AAHD8zFEV-hjsVSfZ4AdtceBi5u9-ywRHOQ"
GROUP_ID = -1001941069892
ADMIN_ID = 6878462090

EMOJIS = ["üéâ", "üëΩ", "ü§¢", "üòµ", "üî•", "üíÄ", "ü§°", "üéà", "‚ö°Ô∏è", "üß†"]

users = {}
degrade_actions = []
diseases = {}

DEGRADE_COOLDOWN = 3600  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —á–∞—Å)
DISEASE_CHANCE_PERCENT = 20  # —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±–æ–ª–µ–∑–Ω–∏ –≤ %

def get_user(user_id):
    if user_id not in users:
        users[user_id] = {"iq": 100, "last_degrade": 0, "diseases": set()}
    return users[user_id]

def calculate_multiplier(user_id):
    mult = 1.0
    for d in get_user(user_id)["diseases"]:
        mult += diseases.get(d, 0)
    return mult

async def degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != GROUP_ID:
        return
    user_id = update.effective_user.id
    user = get_user(user_id)
    now = time.time()
    if now - user["last_degrade"] < DEGRADE_COOLDOWN:
        left = int(DEGRADE_COOLDOWN - (now - user["last_degrade"]))
        m, s = divmod(left, 60)
        await update.message.reply_text(f"‚è≥ –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {m} –º–∏–Ω {s} —Å–µ–∫.")
        return
    if not degrade_actions:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É.")
        return

    action = random.choice(degrade_actions)
    base_loss = abs(action["iq_change"])
    multiplier = calculate_multiplier(user_id)
    iq_loss = int(base_loss * multiplier)

    user["iq"] -= iq_loss
    user["last_degrade"] = now

    emoji = random.choice(EMOJIS)
    msg = f"{action['text']}, —Ç–≤–æ–π IQ —É–ø–∞–ª –Ω–∞ {iq_loss} {emoji}\n–°–µ–π—á–∞—Å —Ç–≤–æ–π IQ: {user['iq']} {random.choice(EMOJIS)}"

    # –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–∑–Ω—å
    if diseases and random.randint(1, 100) <= DISEASE_CHANCE_PERCENT:
        disease_name = random.choice(list(diseases.keys()))
        if disease_name not in user["diseases"]:
            user["diseases"].add(disease_name)
            msg += f"\n{random.choice(EMOJIS)} –í—ã –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏ –±–æ–ª–µ–∑–Ω—å: {disease_name}. –¢–µ–ø–µ—Ä—å IQ –ø–∞–¥–∞–µ—Ç –Ω–∞ {int(diseases[disease_name]*100)}% –±–æ–ª—å—à–µ!"

    await update.message.reply_text(msg)

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != GROUP_ID:
        return
    if not users:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        return
    sorted_users = sorted(users.items(), key=lambda x: x[1]["iq"], reverse=True)[:10]
    msg = "üèÜ –¢–æ–ø IQ:\n"
    for i, (uid, data) in enumerate(sorted_users, 1):
        emoji = random.choice(EMOJIS)
        msg += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}: IQ {data['iq']} {emoji}\n"
    await update.message.reply_text(msg)

async def my(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    if not user["diseases"]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.")
        return
    msg = "–í–∞—à–∏ –±–æ–ª–µ–∑–Ω–∏:\n" + "\n".join(user["diseases"])
    await update.message.reply_text(msg)

# --- –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã ---

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /add —Ç–µ–∫—Å—Ç –º–∏–Ω—É—Å_iq\n–ü—Ä–∏–º–µ—Ä: /add –ö—É–ø–∏–ª –∞–π—Ñ–æ–Ω -3")
        return
    try:
        iq_change = int(context.args[-1])
        text = " ".join(context.args[:-1])
    except:
        await update.message.reply_text("‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    degrade_actions.append({"text": text, "iq_change": iq_change})
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: '{text}' —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º IQ {iq_change}")

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /del –Ω–æ–º–µ—Ä")
        return
    idx = int(context.args[0]) - 1
    if 0 <= idx < len(degrade_actions):
        action = degrade_actions.pop(idx)
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: '{action['text']}'")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")

async def list_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if not degrade_actions:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π.")
        return
    msg = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
    for i, action in enumerate(degrade_actions, 1):
        msg += f"{i}. {action['text']} ({action['iq_change']} IQ)\n"
    await update.message.reply_text(msg)

async def adddisease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /adddisease –Ω–∞–∑–≤–∞–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å (–ø—Ä–∏–º–µ—Ä: 0.3)")
        return
    name = " ".join(context.args[:-1])
    try:
        mult = float(context.args[-1])
    except:
        await update.message.reply_text("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.3")
        return
    diseases[name] = mult
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å '{name}' —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º {mult}")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    users.clear()
    degrade_actions.clear()
    diseases.clear()
    global DISEASE_CHANCE_PERCENT
    DISEASE_CHANCE_PERCENT = 20
    await update.message.reply_text("–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ (IQ, –±–æ–ª–µ–∑–Ω–∏, –¥–µ–π—Å—Ç–≤–∏—è, —à–∞–Ω—Å –±–æ–ª–µ–∑–Ω–∏)")

async def resettimers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    for user in users.values():
        user["last_degrade"] = 0
    await update.message.reply_text("‚è±Ô∏è –¢–∞–π–º–µ—Ä—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã.")

async def setdiseasechance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global DISEASE_CHANCE_PERCENT
    if update.effective_user.id != ADMIN_ID:
        return
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /setdiseasechance —á–∏—Å–ª–æ (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100)")
        return
    val = int(context.args[0])
    if not 0 <= val <= 100:
        await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")
        return
    DISEASE_CHANCE_PERCENT = val
    await update.message.reply_text(f"–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±–æ–ª–µ–∑–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {val}%")

async def eair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    text = (
        "üõ†Ô∏è –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add <—Ç–µ–∫—Å—Ç> <–º–∏–Ω—É—Å_iq> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏\n"
        "/del <–Ω–æ–º–µ—Ä> ‚Äî —É–¥–∞–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
        "/adddisease <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–Ω–æ–∂–∏—Ç–µ–ª—å> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–∑–Ω—å\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å IQ, –±–æ–ª–µ–∑–Ω–∏, –¥–µ–π—Å—Ç–≤–∏—è –∏ —à–∞–Ω—Å –±–æ–ª–µ–∑–Ω–∏\n"
        "/resettimers ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –≤—Å–µ–º\n"
        "/setdiseasechance <–ø—Ä–æ—Ü–µ–Ω—Ç> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±–æ–ª–µ–∑–Ω–∏\n"
    )
    await update.message.reply_text(text)

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("degrade", degrade))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("my", my))

    # –ê–¥–º–∏–Ω
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("del", delete))
    app.add_handler(CommandHandler("list", list_actions))
    app.add_handler(CommandHandler("adddisease", adddisease))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("eair", eair))
    app.add_handler(CommandHandler("resettimers", resettimers))
    app.add_handler(CommandHandler("setdiseasechance", setdiseasechance))

    app.run_polling()

if __name__ == "__main__":
    main()
