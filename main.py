import logging
import random
import time
from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# –¢–æ–∫–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7909644376:AAHD8zFEV-hjsVSfZ4AdtceBi5u9-ywRHOQ"
ADMIN_ID = 6878462090
ALLOWED_GROUP_ID = -1001941069892

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –±–æ–ª–µ–∑–Ω–µ–π –∏ –¥–µ–π—Å—Ç–≤–∏–π (–≤ –ø–∞–º—è—Ç–∏)
users_iq = {}  # user_id: int IQ
users_last_degrade = {}  # user_id: timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
users_points = {}  # user_id: int –æ—á–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
users_diseases = {}  # user_id: list of dict {name, effect, expire_time}

degrade_actions = []  # —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –º–∏–Ω—É—Å–æ–º IQ
diseases = []  # —Å–ø–∏—Å–æ–∫ –±–æ–ª–µ–∑–Ω–µ–π —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —ç—Ñ—Ñ–µ–∫—Ç–æ–º (%) –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–∞—Ö
degrade_custom_cmds = []  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞ –æ—á–∫–∏

SMILES = ["üéâ", "üëΩ", "ü§¢", "üî•", "üíÄ", "üëæ", "üòµ", "üß†", "üõë", "üòà"]

DEGRADE_COOLDOWN = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

def check_group(update: Update) -> bool:
    chat = update.effective_chat
    if chat and chat.id == ALLOWED_GROUP_ID:
        return True
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ IQ. –ò—Å–ø–æ–ª—å–∑—É–π /degrade –≤ –≥—Ä—É–ø–ø–µ.")

async def ensure_user_initialized(user_id: int):
    if user_id not in users_iq:
        users_iq[user_id] = 100
    if user_id not in users_points:
        users_points[user_id] = 0
    if user_id not in users_last_degrade:
        users_last_degrade[user_id] = 0
    if user_id not in users_diseases:
        users_diseases[user_id] = []

def get_random_smile():
    return random.choice(SMILES)

def get_effective_iq_loss(base_loss, user_id):
    # –°—á–∏—Ç–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –±–æ–ª–µ–∑–Ω–µ–π
    total_percent = 0
    now = datetime.now()
    new_diseases = []
    for disease in users_diseases.get(user_id, []):
        if disease["expire_time"] > now:
            total_percent += disease["effect"]
            new_diseases.append(disease)
    users_diseases[user_id] = new_diseases
    final_loss = int(base_loss * (1 + total_percent / 100))
    return final_loss

async def degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_group(update):
        return
    user_id = update.effective_user.id
    await ensure_user_initialized(user_id)
    now_ts = time.time()

    last = users_last_degrade.get(user_id, 0)
    if now_ts - last < DEGRADE_COOLDOWN:
        remain = int((DEGRADE_COOLDOWN - (now_ts - last)) / 60)
        await update.message.reply_text(f"‚è≥ –ú–æ–∂–Ω–æ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑ –≤ —á–∞—Å. –ñ–¥–∏ {remain} –º–∏–Ω.")
        return

    if not degrade_actions:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏.")
        return

    action = random.choice(degrade_actions)
    base_iq_loss = action["iq_loss"]
    iq_loss = get_effective_iq_loss(base_iq_loss, user_id)

    users_iq[user_id] = users_iq.get(user_id, 100) - iq_loss
    users_last_degrade[user_id] = now_ts

    # –®–∞–Ω—Å –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –±–æ–ª–µ–∑–Ω—å
    if diseases:
        chance = random.randint(1, 100)
        # –ù–∞–ø—Ä–∏–º–µ—Ä, 20% —à–∞–Ω—Å
        if chance <= 20:
            disease = random.choice(diseases)
            # –°—Ä–æ–∫ –±–æ–ª–µ–∑–Ω–∏ –æ—Ç min –¥–æ max —á–∞—Å–æ–≤
            now = datetime.now()
            hours = random.randint(disease["min_hours"], disease["max_hours"])
            expire = now + timedelta(hours=hours)
            users_diseases[user_id].append({
                "name": disease["name"],
                "effect": disease["effect"],
                "expire_time": expire,
            })
            disease_text = f"\n{get_random_smile()} –í—ã –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏ –±–æ–ª–µ–∑–Ω—å: {disease['name']}! IQ –±—É–¥–µ—Ç –ø–∞–¥–∞—Ç—å –Ω–∞ {disease['effect']}% –±–æ–ª—å—à–µ."
        else:
            disease_text = ""
    else:
        disease_text = ""

    smile = get_random_smile()

    msg = (
        f"{action['text']}, —Ç–≤–æ–π IQ —É–ø–∞–ª –Ω–∞ {iq_loss} {smile}\n"
        f"–°–µ–π—á–∞—Å —Ç–≤–æ–π IQ: {users_iq[user_id]}{disease_text}"
    )
    await update.message.reply_text(msg)

async def my_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await ensure_user_initialized(user_id)

    now = datetime.now()
    diseases_list = users_diseases.get(user_id, [])
    if not diseases_list:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.")
        return

    msg = "–¢–≤–æ–∏ –±–æ–ª–µ–∑–Ω–∏:\n"
    for i, d in enumerate(diseases_list, 1):
        if d["expire_time"] > now:
            left = d["expire_time"] - now
            hours = left.total_seconds() // 3600
            minutes = (left.total_seconds() % 3600) // 60
            msg += f"{i}. {d['name']} ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç –µ—â–µ {int(hours)}—á {int(minutes)}–º\n"
        else:
            msg += f"{i}. {d['name']} ‚Äî –±–æ–ª–µ–∑–Ω—å –∏—Å—Ç–µ–∫–ª–∞ {d['expire_time'].strftime('%Y-%m-%d %H:%M:%S')} –ø–æ –ú–°–ö\n"
    await update.message.reply_text(msg)

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_group(update):
        return

    sorted_users = sorted(users_iq.items(), key=lambda x: x[1], reverse=True)
    msg = "–¢–æ–ø –ø–æ IQ:\n"
    for i, (user_id, iq) in enumerate(sorted_users[:10], 1):
        try:
            user = await context.bot.get_chat(user_id)
            name = user.first_name or str(user_id)
        except:
            name = str(user_id)
        msg += f"{i}. {name}: {iq}\n"
    await update.message.reply_text(msg)

# --- –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã ---

async def eair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return

    msg = "=== –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ===\n\n"
    msg += "–î–µ–π—Å—Ç–≤–∏—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
    if degrade_actions:
        for i, a in enumerate(degrade_actions, 1):
            msg += f"{i}. {a['text']} | IQ: {a['iq_loss']}\n"
    else:
        msg += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π.\n"

    msg += "\n–ë–æ–ª–µ–∑–Ω–∏:\n"
    if diseases:
        for i, d in enumerate(diseases, 1):
            msg += f"{i}. {d['name']} | –≠—Ñ—Ñ–µ–∫—Ç: {d['effect']}% | –í—Ä–µ–º—è: {d['min_hours']}‚Äì{d['max_hours']} —á\n"
    else:
        msg += "–ü–æ–∫–∞ –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.\n"

    msg += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
    if degrade_custom_cmds:
        for i, c in enumerate(degrade_custom_cmds, 1):
            msg += f"{i}. ({c['user_id']}) {c['text']}\n"
    else:
        msg += "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.\n"

    await update.message.reply_text(msg)

async def add_degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /add <—Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è> <—á–∏—Å–ª–æ IQ>")
        return
    try:
        iq_loss = int(context.args[-1])
        text = " ".join(context.args[:-1])
        degrade_actions.append({"text": text, "iq_loss": iq_loss})
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {text} —Å IQ {iq_loss}")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.")

async def del_degrade(update: Update, context: ContextTypes
                      async def del_degrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /del <–Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è>")
        return
    try:
        idx = int(context.args[0]) - 1
        if 0 <= idx < len(degrade_actions):
            removed = degrade_actions.pop(idx)
            await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {removed['text']}")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è.")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.")

async def add_disease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if len(context.args) < 4:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π: /adddisease <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—ç—Ñ—Ñ–µ–∫—Ç%> <–º–∏–Ω.—á–∞—Å—ã> <–º–∞–∫—Å.—á–∞—Å—ã>"
        )
        return
    try:
        name = context.args[0]
        effect = int(context.args[1])
        min_hours = int(context.args[2])
        max_hours = int(context.args[3])
        diseases.append({
            "name": name,
            "effect": effect,
            "min_hours": min_hours,
            "max_hours": max_hours,
        })
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å: {name}")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.")

async def del_disease(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /deldisease <–Ω–æ–º–µ—Ä>")
        return
    try:
        idx = int(context.args[0]) - 1
        if 0 <= idx < len(diseases):
            removed = diseases.pop(idx)
            await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å: {removed['name']}")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–æ–ª–µ–∑–Ω–∏.")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ–ª–µ–∑–Ω–∏.")

async def list_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if not diseases:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π.")
        return
    msg = "–°–ø–∏—Å–æ–∫ –±–æ–ª–µ–∑–Ω–µ–π:\n"
    for i, d in enumerate(diseases, 1):
        msg += f"{i}. {d['name']} | –≠—Ñ—Ñ–µ–∫—Ç: {d['effect']}% | –í—Ä–µ–º—è: {d['min_hours']}‚Äì{d['max_hours']} —á\n"
    await update.message.reply_text(msg)

async def reset_diseases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    for uid in users_diseases.keys():
        users_diseases[uid] = []
    await update.message.reply_text("–í—Å–µ –±–æ–ª–µ–∑–Ω–∏ —Å–±—Ä–æ—à–µ–Ω—ã —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

async def reset_iq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    for uid in users_iq.keys():
        users_iq[uid] = 100
    await update.message.reply_text("IQ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω –¥–æ 100.")

async def set_iq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /setiq <user_id> <–∑–Ω–∞—á–µ–Ω–∏–µ>")
        return
    try:
        target_id = int(context.args[0])
        iq_val = int(context.args[1])
        users_iq[target_id] = iq_val
        await update.message.reply_text(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω IQ = {iq_val}")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.")

async def add_point(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /addpoint <user_id> <–∫–æ–ª-–≤–æ>")
        return
    try:
        target_id = int(context.args[0])
        pts = int(context.args[1])
        users_points[target_id] = users_points.get(target_id, 0) + pts
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {pts} –æ—á–∫–æ–≤.")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.")

async def my_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    pts = users_points.get(user_id, 0)
    await update.message.reply_text(f"–£ —Ç–µ–±—è {pts} –æ—á–∫–æ–≤.")

async def add_custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    pts = users_points.get(user_id, 0)
    if pts < 1:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –æ—á–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (–Ω—É–∂–Ω–æ 1).")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /d <—Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è>")
        return
    text = " ".join(context.args)
    degrade_custom_cmds.append({
        "user_id": user_id,
        "text": text,
        "iq_loss": 1,
    })
    users_points[user_id] = pts - 1
    await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

async def list_custom_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    if not degrade_custom_cmds:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç.")
        return
    msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:\n"
    for i, c in enumerate(degrade_custom_cmds, 1):
        msg += f"{i}. ({c['user_id']}) {c['text']} IQ: {c['iq_loss']}\n"
    await update.message.reply_text(msg)

async def reset_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    for uid in users_last_degrade.keys():
        users_last_degrade[uid] = 0
    await update.message.reply_text("–¢–∞–π–º–µ—Ä—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ —É –≤—Å–µ—Ö —Å–±—Ä–æ—à–µ–Ω—ã.")

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("degrade", degrade))
    application.add_handler(CommandHandler("mydiseases", my_diseases))
    application.add_handler(CommandHandler("top", top))
    application.add_handler(CommandHandler("d", add_custom_command))
    application.add_handler(CommandHandler("mypoints", my_points))

    # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("eair", eair))
    application.add_handler(CommandHandler("add", add_degrade))
    application.add_handler(CommandHandler("del", del_degrade))
    application.add_handler(CommandHandler("adddisease", add_disease))
    application.add_handler(CommandHandler("deldisease", del_disease))
    application.add_handler(CommandHandler("listdiseases", list_diseases))
    application.add_handler(CommandHandler("resetdiseases", reset_diseases))
    application.add_handler(CommandHandler("resetiq", reset_iq))
    application.add_handler(CommandHandler("setiq", set_iq))
    application.add_handler(CommandHandler("addpoint", add_point))
    application.add_handler(CommandHandler("listcustom", list_custom_commands))
    application.add_handler(CommandHandler("resettimer", reset_timer))

    application.run_polling()

if __name__ == "__main__":
    main()
